//IP Functional Simulation Model
//VERSION_BEGIN 18.1 cbx_mgl 2018:09:12:13:10:36:SJ cbx_simgen 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Intel disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = lpm_mult 5 lut 125 mux21 24 oper_add 9 oper_mux 33 
`timescale 1 ps / 1 ps
module  fptest
	( 
	a,
	areset,
	b,
	clk,
	en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  a;
	input   areset;
	input   [31:0]  b;
	input   clk;
	input   [0:0]  en;
	output   [31:0]  q;

	reg	n000i;
	reg	n000l;
	reg	n000O;
	reg	n001i;
	reg	n001l;
	reg	n001O;
	reg	n00i;
	reg	n00ii;
	reg	n00il;
	reg	n00iO;
	reg	n00l;
	reg	n00li;
	reg	n00ll;
	reg	n00lO;
	reg	n00O;
	reg	n00Oi;
	reg	n00Ol;
	reg	n00OO;
	reg	n011i;
	reg	n011l;
	reg	n011O;
	reg	n01il;
	reg	n01iO;
	reg	n01li;
	reg	n01ll;
	reg	n01lO;
	reg	n01O;
	reg	n01Oi;
	reg	n01Ol;
	reg	n01OO;
	reg	n0i0i;
	reg	n0i0l;
	reg	n0i0O;
	reg	n0i1i;
	reg	n0i1l;
	reg	n0i1O;
	reg	n0ii;
	reg	n0iii;
	reg	n0iil;
	reg	n0iiO;
	reg	n0il;
	reg	n0ili;
	reg	n0ill;
	reg	n0ilO;
	reg	n0iO;
	reg	n0iOi;
	reg	n0iOl;
	reg	n0iOO;
	reg	n0l0i;
	reg	n0l0l;
	reg	n0l0O;
	reg	n0l1i;
	reg	n0l1l;
	reg	n0l1O;
	reg	n0li;
	reg	n0lii;
	reg	n0lil;
	reg	n0liO;
	reg	n0ll;
	reg	n0lli;
	reg	n0lll;
	reg	n0Oi;
	reg	n0Ol;
	reg	n0OO;
	reg	n1l0i;
	reg	n1l0l;
	reg	n1l0O;
	reg	n1l1i;
	reg	n1l1l;
	reg	n1l1O;
	reg	n1lii;
	reg	n1lil;
	reg	n1liO;
	reg	n1lli;
	reg	n1lll;
	reg	n1llO;
	reg	n1lOi;
	reg	n1lOl;
	reg	n1lOO;
	reg	n1O0i;
	reg	n1O0l;
	reg	n1O0O;
	reg	n1O1i;
	reg	n1O1l;
	reg	n1O1O;
	reg	n1Oii;
	reg	n1Oil;
	reg	n1OiO;
	reg	n1Oli;
	reg	n1Oll;
	reg	n1OlO;
	reg	n1OOi;
	reg	n1OOO;
	reg	ni0i;
	reg	ni0l;
	reg	ni0O;
	reg	ni1i;
	reg	ni1l;
	reg	ni1O;
	reg	niii;
	reg	niil;
	reg	niiO;
	reg	nili;
	reg	nill;
	reg	nilO;
	reg	niOi;
	reg	niOl;
	reg	niOO;
	reg	nl0i;
	reg	nl0l;
	reg	nl0O;
	reg	nl1i;
	reg	nl1l;
	reg	nl1O;
	reg	nlii;
	reg	nlil;
	reg	nliO;
	reg	nlli;
	reg	nllii;
	reg	nllil;
	reg	nlll;
	reg	nllO;
	reg	nlO0l;
	reg	nlOi;
	reg	nlOO;
	wire	wire_nlOl_ENA;
	wire  [3:0]   wire_n010i_result;
	wire  [17:0]   wire_n010l_result;
	wire  [17:0]   wire_n010O_result;
	wire  [35:0]   wire_n01ii_result;
	wire  [3:0]   wire_n1OOl_result;
	wire	wire_n01i_dataout;
	wire	wire_n10i_dataout;
	wire	wire_n10l_dataout;
	wire	wire_n10O_dataout;
	wire	wire_n11i_dataout;
	wire	wire_n11l_dataout;
	wire	wire_n11O_dataout;
	wire	wire_n1ii_dataout;
	wire	wire_n1il_dataout;
	wire	wire_n1iO_dataout;
	wire	wire_n1li_dataout;
	wire	wire_n1ll_dataout;
	wire	wire_n1lO_dataout;
	wire	wire_n1Oi_dataout;
	wire	wire_n1Ol_dataout;
	wire	wire_n1OO_dataout;
	wire	wire_nlOil_dataout;
	wire	wire_nlOiO_dataout;
	wire	wire_nlOli_dataout;
	wire	wire_nlOll_dataout;
	wire	wire_nlOlO_dataout;
	wire	wire_nlOOi_dataout;
	wire	wire_nlOOl_dataout;
	wire	wire_nlOOO_dataout;
	wire  [12:0]   wire_n01l_o;
	wire  [33:0]   wire_n0i_o;
	wire  [8:0]   wire_n0lO_o;
	wire  [37:0]   wire_n1i_o;
	wire  [36:0]   wire_n1l_o;
	wire  [13:0]   wire_n1O_o;
	wire  [14:0]   wire_nlliO_o;
	wire  [14:0]   wire_nlO0O_o;
	wire  [36:0]   wire_nlOii_o;
	wire  wire_nl00i_o;
	wire  wire_nl00l_o;
	wire  wire_nl00O_o;
	wire  wire_nl01i_o;
	wire  wire_nl01l_o;
	wire  wire_nl01O_o;
	wire  wire_nl0ii_o;
	wire  wire_nl0il_o;
	wire  wire_nl0iO_o;
	wire  wire_nl0li_o;
	wire  wire_nl0ll_o;
	wire  wire_nl0lO_o;
	wire  wire_nl0Oi_o;
	wire  wire_nl0Ol_o;
	wire  wire_nl0OO_o;
	wire  wire_nl1lO_o;
	wire  wire_nl1Oi_o;
	wire  wire_nl1Ol_o;
	wire  wire_nl1OO_o;
	wire  wire_nli0i_o;
	wire  wire_nli0l_o;
	wire  wire_nli0O_o;
	wire  wire_nli1i_o;
	wire  wire_nli1l_o;
	wire  wire_nli1O_o;
	wire  wire_nliii_o;
	wire  wire_nliil_o;
	wire  wire_nliiO_o;
	wire  wire_nlili_o;
	wire  wire_nlill_o;
	wire  wire_nlilO_o;
	wire  wire_nliOi_o;
	wire  wire_nliOl_o;
	wire  n10Ol;
	wire  n10OO;
	wire  n1i0i;
	wire  n1i0l;
	wire  n1i0O;
	wire  n1i1i;
	wire  n1i1l;
	wire  n1i1O;
	wire  n1iii;
	wire  n1iil;
	wire  n1iiO;
	wire  n1ili;
	wire  n1ill;
	wire  n1ilO;
	wire  n1iOi;

	initial
	begin
		n000i = 0;
		n000l = 0;
		n000O = 0;
		n001i = 0;
		n001l = 0;
		n001O = 0;
		n00i = 0;
		n00ii = 0;
		n00il = 0;
		n00iO = 0;
		n00l = 0;
		n00li = 0;
		n00ll = 0;
		n00lO = 0;
		n00O = 0;
		n00Oi = 0;
		n00Ol = 0;
		n00OO = 0;
		n011i = 0;
		n011l = 0;
		n011O = 0;
		n01il = 0;
		n01iO = 0;
		n01li = 0;
		n01ll = 0;
		n01lO = 0;
		n01O = 0;
		n01Oi = 0;
		n01Ol = 0;
		n01OO = 0;
		n0i0i = 0;
		n0i0l = 0;
		n0i0O = 0;
		n0i1i = 0;
		n0i1l = 0;
		n0i1O = 0;
		n0ii = 0;
		n0iii = 0;
		n0iil = 0;
		n0iiO = 0;
		n0il = 0;
		n0ili = 0;
		n0ill = 0;
		n0ilO = 0;
		n0iO = 0;
		n0iOi = 0;
		n0iOl = 0;
		n0iOO = 0;
		n0l0i = 0;
		n0l0l = 0;
		n0l0O = 0;
		n0l1i = 0;
		n0l1l = 0;
		n0l1O = 0;
		n0li = 0;
		n0lii = 0;
		n0lil = 0;
		n0liO = 0;
		n0ll = 0;
		n0lli = 0;
		n0lll = 0;
		n0Oi = 0;
		n0Ol = 0;
		n0OO = 0;
		n1l0i = 0;
		n1l0l = 0;
		n1l0O = 0;
		n1l1i = 0;
		n1l1l = 0;
		n1l1O = 0;
		n1lii = 0;
		n1lil = 0;
		n1liO = 0;
		n1lli = 0;
		n1lll = 0;
		n1llO = 0;
		n1lOi = 0;
		n1lOl = 0;
		n1lOO = 0;
		n1O0i = 0;
		n1O0l = 0;
		n1O0O = 0;
		n1O1i = 0;
		n1O1l = 0;
		n1O1O = 0;
		n1Oii = 0;
		n1Oil = 0;
		n1OiO = 0;
		n1Oli = 0;
		n1Oll = 0;
		n1OlO = 0;
		n1OOi = 0;
		n1OOO = 0;
		ni0i = 0;
		ni0l = 0;
		ni0O = 0;
		ni1i = 0;
		ni1l = 0;
		ni1O = 0;
		niii = 0;
		niil = 0;
		niiO = 0;
		nili = 0;
		nill = 0;
		nilO = 0;
		niOi = 0;
		niOl = 0;
		niOO = 0;
		nl0i = 0;
		nl0l = 0;
		nl0O = 0;
		nl1i = 0;
		nl1l = 0;
		nl1O = 0;
		nlii = 0;
		nlil = 0;
		nliO = 0;
		nlli = 0;
		nllii = 0;
		nllil = 0;
		nlll = 0;
		nllO = 0;
		nlO0l = 0;
		nlOi = 0;
		nlOO = 0;
	end
	always @ ( posedge clk or  posedge areset)
	begin
		if (areset == 1'b1) 
		begin
			n000i <= 0;
			n000l <= 0;
			n000O <= 0;
			n001i <= 0;
			n001l <= 0;
			n001O <= 0;
			n00i <= 0;
			n00ii <= 0;
			n00il <= 0;
			n00iO <= 0;
			n00l <= 0;
			n00li <= 0;
			n00ll <= 0;
			n00lO <= 0;
			n00O <= 0;
			n00Oi <= 0;
			n00Ol <= 0;
			n00OO <= 0;
			n011i <= 0;
			n011l <= 0;
			n011O <= 0;
			n01il <= 0;
			n01iO <= 0;
			n01li <= 0;
			n01ll <= 0;
			n01lO <= 0;
			n01O <= 0;
			n01Oi <= 0;
			n01Ol <= 0;
			n01OO <= 0;
			n0i0i <= 0;
			n0i0l <= 0;
			n0i0O <= 0;
			n0i1i <= 0;
			n0i1l <= 0;
			n0i1O <= 0;
			n0ii <= 0;
			n0iii <= 0;
			n0iil <= 0;
			n0iiO <= 0;
			n0il <= 0;
			n0ili <= 0;
			n0ill <= 0;
			n0ilO <= 0;
			n0iO <= 0;
			n0iOi <= 0;
			n0iOl <= 0;
			n0iOO <= 0;
			n0l0i <= 0;
			n0l0l <= 0;
			n0l0O <= 0;
			n0l1i <= 0;
			n0l1l <= 0;
			n0l1O <= 0;
			n0li <= 0;
			n0lii <= 0;
			n0lil <= 0;
			n0liO <= 0;
			n0ll <= 0;
			n0lli <= 0;
			n0lll <= 0;
			n0Oi <= 0;
			n0Ol <= 0;
			n0OO <= 0;
			n1l0i <= 0;
			n1l0l <= 0;
			n1l0O <= 0;
			n1l1i <= 0;
			n1l1l <= 0;
			n1l1O <= 0;
			n1lii <= 0;
			n1lil <= 0;
			n1liO <= 0;
			n1lli <= 0;
			n1lll <= 0;
			n1llO <= 0;
			n1lOi <= 0;
			n1lOl <= 0;
			n1lOO <= 0;
			n1O0i <= 0;
			n1O0l <= 0;
			n1O0O <= 0;
			n1O1i <= 0;
			n1O1l <= 0;
			n1O1O <= 0;
			n1Oii <= 0;
			n1Oil <= 0;
			n1OiO <= 0;
			n1Oli <= 0;
			n1Oll <= 0;
			n1OlO <= 0;
			n1OOi <= 0;
			n1OOO <= 0;
			ni0i <= 0;
			ni0l <= 0;
			ni0O <= 0;
			ni1i <= 0;
			ni1l <= 0;
			ni1O <= 0;
			niii <= 0;
			niil <= 0;
			niiO <= 0;
			nili <= 0;
			nill <= 0;
			nilO <= 0;
			niOi <= 0;
			niOl <= 0;
			niOO <= 0;
			nl0i <= 0;
			nl0l <= 0;
			nl0O <= 0;
			nl1i <= 0;
			nl1l <= 0;
			nl1O <= 0;
			nlii <= 0;
			nlil <= 0;
			nliO <= 0;
			nlli <= 0;
			nllii <= 0;
			nllil <= 0;
			nlll <= 0;
			nllO <= 0;
			nlO0l <= 0;
			nlOi <= 0;
			nlOO <= 0;
		end
		else if  (wire_nlOl_ENA == 1'b1) 
		begin
			n000i <= n00i;
			n000l <= n00l;
			n000O <= n00O;
			n001i <= n00li;
			n001l <= nlO0l;
			n001O <= n01O;
			n00i <= wire_n0lO_o[2];
			n00ii <= n0ii;
			n00il <= n0il;
			n00iO <= n0iO;
			n00l <= wire_n0lO_o[3];
			n00li <= n0li;
			n00ll <= wire_nlOii_o[24];
			n00lO <= wire_nlOii_o[25];
			n00O <= wire_n0lO_o[4];
			n00Oi <= wire_nlOii_o[26];
			n00Ol <= wire_nlOii_o[27];
			n00OO <= wire_nlOii_o[28];
			n011i <= wire_n1OOl_result[1];
			n011l <= wire_n1OOl_result[2];
			n011O <= wire_n1OOl_result[3];
			n01il <= n001l;
			n01iO <= n001O;
			n01li <= n000i;
			n01ll <= n000l;
			n01lO <= n000O;
			n01O <= wire_n0lO_o[1];
			n01Oi <= n00ii;
			n01Ol <= n00il;
			n01OO <= n00iO;
			n0i0i <= wire_nlOii_o[1];
			n0i0l <= wire_nlOii_o[2];
			n0i0O <= wire_nlOii_o[3];
			n0i1i <= wire_nlOii_o[29];
			n0i1l <= wire_nlOii_o[30];
			n0i1O <= wire_nlOii_o[31];
			n0ii <= wire_n0lO_o[5];
			n0iii <= wire_nlOii_o[4];
			n0iil <= wire_nlOii_o[5];
			n0iiO <= wire_nlOii_o[6];
			n0il <= wire_n0lO_o[6];
			n0ili <= wire_nlOii_o[7];
			n0ill <= wire_nlOii_o[8];
			n0ilO <= wire_nlOii_o[9];
			n0iO <= wire_n0lO_o[7];
			n0iOi <= wire_nlOii_o[10];
			n0iOl <= wire_nlOii_o[11];
			n0iOO <= wire_nlOii_o[12];
			n0l0i <= wire_nlOii_o[16];
			n0l0l <= wire_nlOii_o[17];
			n0l0O <= wire_nlOii_o[18];
			n0l1i <= wire_nlOii_o[13];
			n0l1l <= wire_nlOii_o[14];
			n0l1O <= wire_nlOii_o[15];
			n0li <= wire_n0lO_o[8];
			n0lii <= wire_nlOii_o[19];
			n0lil <= wire_nlOii_o[20];
			n0liO <= wire_nlOii_o[21];
			n0ll <= wire_n1i_o[5];
			n0lli <= wire_nlOii_o[22];
			n0lll <= wire_nlOii_o[23];
			n0Oi <= wire_n1i_o[6];
			n0Ol <= wire_n1i_o[7];
			n0OO <= wire_n1i_o[8];
			n1l0i <= n1l1i;
			n1l0l <= n1i1O;
			n1l0O <= n1lii;
			n1l1i <= n1i0i;
			n1l1l <= n1l1O;
			n1l1O <= n1l0i;
			n1lii <= n1lil;
			n1lil <= n1l0l;
			n1liO <= n1i1l;
			n1lli <= n1lll;
			n1lll <= n1llO;
			n1llO <= n1liO;
			n1lOi <= n1i1i;
			n1lOl <= n1lOO;
			n1lOO <= n1O1i;
			n1O0i <= n1O0l;
			n1O0l <= n1O1l;
			n1O0O <= n10Ol;
			n1O1i <= n1lOi;
			n1O1l <= n10OO;
			n1O1O <= n1O0i;
			n1Oii <= n1Oil;
			n1Oil <= n1OiO;
			n1OiO <= n1O0O;
			n1Oli <= (a[31] ^ b[31]);
			n1Oll <= n1OlO;
			n1OlO <= n1OOi;
			n1OOi <= n1Oli;
			n1OOO <= wire_n1OOl_result[0];
			ni0i <= wire_n1i_o[12];
			ni0l <= wire_n1i_o[13];
			ni0O <= wire_n1i_o[14];
			ni1i <= wire_n1i_o[9];
			ni1l <= wire_n1i_o[10];
			ni1O <= wire_n1i_o[11];
			niii <= wire_n1i_o[15];
			niil <= wire_n1i_o[16];
			niiO <= wire_n1i_o[17];
			nili <= wire_n1i_o[18];
			nill <= wire_n1i_o[19];
			nilO <= wire_n1i_o[20];
			niOi <= wire_n1i_o[21];
			niOl <= wire_n1i_o[22];
			niOO <= wire_n1i_o[23];
			nl0i <= wire_n1i_o[27];
			nl0l <= wire_n1i_o[28];
			nl0O <= wire_n1i_o[29];
			nl1i <= wire_n1i_o[24];
			nl1l <= wire_n1i_o[25];
			nl1O <= wire_n1i_o[26];
			nlii <= wire_n1i_o[30];
			nlil <= wire_n1i_o[31];
			nliO <= wire_n1i_o[32];
			nlli <= wire_n1i_o[33];
			nllii <= wire_nlliO_o[14];
			nllil <= wire_nlO0O_o[14];
			nlll <= wire_n1i_o[34];
			nllO <= wire_n1i_o[35];
			nlO0l <= wire_n0lO_o[0];
			nlOi <= wire_n1i_o[36];
			nlOO <= wire_n1i_o[37];
		end
	end
	assign
		wire_nlOl_ENA = en[0];
	lpm_mult   n010i
	( 
	.aclr(areset),
	.clken(en[0]),
	.clock(clk),
	.dataa({a[14:13]}),
	.datab({b[5:4]}),
	.result(wire_n010i_result),
	.sum()
	);
	defparam
		n010i.lpm_pipeline = 2,
		n010i.lpm_representation = "UNSIGNED",
		n010i.lpm_widtha = 2,
		n010i.lpm_widthb = 2,
		n010i.lpm_widthp = 4,
		n010i.lpm_widths = 1,
		n010i.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n010l
	( 
	.aclr(areset),
	.clken(en[0]),
	.clock(clk),
	.dataa({a[5:0], {3{1'b0}}}),
	.datab({1'b1, b[22:15]}),
	.result(wire_n010l_result),
	.sum()
	);
	defparam
		n010l.lpm_pipeline = 2,
		n010l.lpm_representation = "UNSIGNED",
		n010l.lpm_widtha = 9,
		n010l.lpm_widthb = 9,
		n010l.lpm_widthp = 18,
		n010l.lpm_widths = 1,
		n010l.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n010O
	( 
	.aclr(areset),
	.clken(en[0]),
	.clock(clk),
	.dataa({1'b1, a[22:15]}),
	.datab({b[5:0], {3{1'b0}}}),
	.result(wire_n010O_result),
	.sum()
	);
	defparam
		n010O.lpm_pipeline = 2,
		n010O.lpm_representation = "UNSIGNED",
		n010O.lpm_widtha = 9,
		n010O.lpm_widthb = 9,
		n010O.lpm_widthp = 18,
		n010O.lpm_widths = 1,
		n010O.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n01ii
	( 
	.aclr(areset),
	.clken(en[0]),
	.clock(clk),
	.dataa({1'b1, a[22:6]}),
	.datab({1'b1, b[22:6]}),
	.result(wire_n01ii_result),
	.sum()
	);
	defparam
		n01ii.lpm_pipeline = 2,
		n01ii.lpm_representation = "UNSIGNED",
		n01ii.lpm_widtha = 18,
		n01ii.lpm_widthb = 18,
		n01ii.lpm_widthp = 36,
		n01ii.lpm_widths = 1,
		n01ii.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	lpm_mult   n1OOl
	( 
	.aclr(areset),
	.clken(en[0]),
	.clock(clk),
	.dataa({a[5:4]}),
	.datab({b[14:13]}),
	.result(wire_n1OOl_result),
	.sum()
	);
	defparam
		n1OOl.lpm_pipeline = 2,
		n1OOl.lpm_representation = "UNSIGNED",
		n1OOl.lpm_widtha = 2,
		n1OOl.lpm_widthb = 2,
		n1OOl.lpm_widthp = 4,
		n1OOl.lpm_widths = 1,
		n1OOl.lpm_hint = "INPUT_A_FIXED_VALUE=Bx, INPUT_B_FIXED_VALUE=Bx";
	assign		wire_n01i_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[28] : wire_n0i_o[29];
	assign		wire_n10i_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[16] : wire_n0i_o[17];
	assign		wire_n10l_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[17] : wire_n0i_o[18];
	assign		wire_n10O_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[18] : wire_n0i_o[19];
	assign		wire_n11i_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[13] : wire_n0i_o[14];
	assign		wire_n11l_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[14] : wire_n0i_o[15];
	assign		wire_n11O_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[15] : wire_n0i_o[16];
	assign		wire_n1ii_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[19] : wire_n0i_o[20];
	assign		wire_n1il_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[20] : wire_n0i_o[21];
	assign		wire_n1iO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[21] : wire_n0i_o[22];
	assign		wire_n1li_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[22] : wire_n0i_o[23];
	assign		wire_n1ll_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[23] : wire_n0i_o[24];
	assign		wire_n1lO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[24] : wire_n0i_o[25];
	assign		wire_n1Oi_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[25] : wire_n0i_o[26];
	assign		wire_n1Ol_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[26] : wire_n0i_o[27];
	assign		wire_n1OO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[27] : wire_n0i_o[28];
	assign		wire_nlOil_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[5] : wire_n0i_o[6];
	assign		wire_nlOiO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[6] : wire_n0i_o[7];
	assign		wire_nlOli_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[7] : wire_n0i_o[8];
	assign		wire_nlOll_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[8] : wire_n0i_o[9];
	assign		wire_nlOlO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[9] : wire_n0i_o[10];
	assign		wire_nlOOi_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[10] : wire_n0i_o[11];
	assign		wire_nlOOl_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[11] : wire_n0i_o[12];
	assign		wire_nlOOO_dataout = ((~ wire_n0i_o[30]) === 1'b1) ? wire_n0i_o[12] : wire_n0i_o[13];
	oper_add   n01l
	( 
	.a({{3{1'b0}}, n001i, n01OO, n01Ol, n01Oi, n01lO, n01ll, n01li, n01iO, n01il, 1'b1}),
	.b({{5{1'b1}}, {7{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n01l_o));
	defparam
		n01l.sgate_representation = 0,
		n01l.width_a = 13,
		n01l.width_b = 13,
		n01l.width_o = 13;
	oper_add   n0i
	( 
	.a({1'b0, nlOO, nlOi, nllO, nlll, nlli, nliO, nlil, nlii, nl0O, nl0l, nl0i, nl1O, nl1l, nl1i, niOO, niOl, niOi, nilO, nill, nili, niiO, niil, niii, ni0O, ni0l, ni0i, ni1O, ni1l, ni1i, n0OO, n0Ol, n0Oi, n0ll}),
	.b({{30{1'b0}}, n011O, n011l, n011i, n1OOO}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0i_o));
	defparam
		n0i.sgate_representation = 0,
		n0i.width_a = 34,
		n0i.width_b = 34,
		n0i.width_o = 34;
	oper_add   n0lO
	( 
	.a({1'b0, a[30:23]}),
	.b({1'b0, b[30:23]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n0lO_o));
	defparam
		n0lO.sgate_representation = 0,
		n0lO.width_a = 9,
		n0lO.width_b = 9,
		n0lO.width_o = 9;
	oper_add   n1i
	( 
	.a({1'b0, wire_n1l_o[36:0]}),
	.b({{19{1'b0}}, wire_n1O_o[13:0], wire_n010l_result[4:0]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1i_o));
	defparam
		n1i.sgate_representation = 0,
		n1i.width_a = 38,
		n1i.width_b = 38,
		n1i.width_o = 38;
	oper_add   n1l
	( 
	.a({1'b0, wire_n01ii_result[35:0]}),
	.b({{19{1'b0}}, wire_n010O_result[17:0]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1l_o));
	defparam
		n1l.sgate_representation = 0,
		n1l.width_a = 37,
		n1l.width_b = 37,
		n1l.width_o = 37;
	oper_add   n1O
	( 
	.a({1'b0, wire_n010l_result[17:5]}),
	.b({{10{1'b0}}, wire_n010i_result[3:0]}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1O_o));
	defparam
		n1O.sgate_representation = 0,
		n1O.width_a = 14,
		n1O.width_b = 14,
		n1O.width_o = 14;
	oper_add   nlliO
	( 
	.a({{3{(~ wire_nlOii_o[35])}}, (~ wire_nlOii_o[34]), (~ wire_nlOii_o[33]), (~ wire_nlOii_o[32]), (~ wire_nlOii_o[31]), (~ wire_nlOii_o[30]), (~ wire_nlOii_o[29]), (~ wire_nlOii_o[28]), (~ wire_nlOii_o[27]), (~ wire_nlOii_o[26]), (~ wire_nlOii_o[25]), (~ wire_nlOii_o[24]), 1'b1}),
	.b({{14{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlliO_o));
	defparam
		nlliO.sgate_representation = 0,
		nlliO.width_a = 15,
		nlliO.width_b = 15,
		nlliO.width_o = 15;
	oper_add   nlO0O
	( 
	.a({{2{wire_nlOii_o[35]}}, wire_nlOii_o[35:24], 1'b1}),
	.b({{6{1'b1}}, {8{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlO0O_o));
	defparam
		nlO0O.sgate_representation = 0,
		nlO0O.width_a = 15,
		nlO0O.width_b = 15,
		nlO0O.width_o = 15;
	oper_add   nlOii
	( 
	.a({{2{wire_n01l_o[11]}}, wire_n01l_o[11:1], wire_n01i_dataout, wire_n1OO_dataout, wire_n1Ol_dataout, wire_n1Oi_dataout, wire_n1lO_dataout, wire_n1ll_dataout, wire_n1li_dataout, wire_n1iO_dataout, wire_n1il_dataout, wire_n1ii_dataout, wire_n10O_dataout, wire_n10l_dataout, wire_n10i_dataout, wire_n11O_dataout, wire_n11l_dataout, wire_n11i_dataout, wire_nlOOO_dataout, wire_nlOOl_dataout, wire_nlOOi_dataout, wire_nlOlO_dataout, wire_nlOll_dataout, wire_nlOli_dataout, wire_nlOiO_dataout, wire_nlOil_dataout}),
	.b({{12{1'b0}}, wire_n0i_o[30], {23{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOii_o));
	defparam
		nlOii.sgate_representation = 0,
		nlOii.width_a = 37,
		nlOii.width_b = 37,
		nlOii.width_o = 37;
	oper_mux   nl00i
	( 
	.data({{2{1'b0}}, n0ill, 1'b0}),
	.o(wire_nl00i_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl00i.width_data = 4,
		nl00i.width_sel = 2;
	oper_mux   nl00l
	( 
	.data({{2{1'b0}}, n0ilO, 1'b0}),
	.o(wire_nl00l_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl00l.width_data = 4,
		nl00l.width_sel = 2;
	oper_mux   nl00O
	( 
	.data({{2{1'b0}}, n0iOi, 1'b0}),
	.o(wire_nl00O_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl00O.width_data = 4,
		nl00O.width_sel = 2;
	oper_mux   nl01i
	( 
	.data({{2{1'b0}}, n0iil, 1'b0}),
	.o(wire_nl01i_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl01i.width_data = 4,
		nl01i.width_sel = 2;
	oper_mux   nl01l
	( 
	.data({{2{1'b0}}, n0iiO, 1'b0}),
	.o(wire_nl01l_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl01l.width_data = 4,
		nl01l.width_sel = 2;
	oper_mux   nl01O
	( 
	.data({{2{1'b0}}, n0ili, 1'b0}),
	.o(wire_nl01O_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl01O.width_data = 4,
		nl01O.width_sel = 2;
	oper_mux   nl0ii
	( 
	.data({{2{1'b0}}, n0iOl, 1'b0}),
	.o(wire_nl0ii_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0ii.width_data = 4,
		nl0ii.width_sel = 2;
	oper_mux   nl0il
	( 
	.data({{2{1'b0}}, n0iOO, 1'b0}),
	.o(wire_nl0il_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0il.width_data = 4,
		nl0il.width_sel = 2;
	oper_mux   nl0iO
	( 
	.data({{2{1'b0}}, n0l1i, 1'b0}),
	.o(wire_nl0iO_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0iO.width_data = 4,
		nl0iO.width_sel = 2;
	oper_mux   nl0li
	( 
	.data({{2{1'b0}}, n0l1l, 1'b0}),
	.o(wire_nl0li_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0li.width_data = 4,
		nl0li.width_sel = 2;
	oper_mux   nl0ll
	( 
	.data({{2{1'b0}}, n0l1O, 1'b0}),
	.o(wire_nl0ll_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0ll.width_data = 4,
		nl0ll.width_sel = 2;
	oper_mux   nl0lO
	( 
	.data({{2{1'b0}}, n0l0i, 1'b0}),
	.o(wire_nl0lO_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0lO.width_data = 4,
		nl0lO.width_sel = 2;
	oper_mux   nl0Oi
	( 
	.data({{2{1'b0}}, n0l0l, 1'b0}),
	.o(wire_nl0Oi_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0Oi.width_data = 4,
		nl0Oi.width_sel = 2;
	oper_mux   nl0Ol
	( 
	.data({{2{1'b0}}, n0l0O, 1'b0}),
	.o(wire_nl0Ol_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0Ol.width_data = 4,
		nl0Ol.width_sel = 2;
	oper_mux   nl0OO
	( 
	.data({{2{1'b0}}, n0lii, 1'b0}),
	.o(wire_nl0OO_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl0OO.width_data = 4,
		nl0OO.width_sel = 2;
	oper_mux   nl1lO
	( 
	.data({1'b1, 1'b0, n0i0i, 1'b0}),
	.o(wire_nl1lO_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl1lO.width_data = 4,
		nl1lO.width_sel = 2;
	oper_mux   nl1Oi
	( 
	.data({{2{1'b0}}, n0i0l, 1'b0}),
	.o(wire_nl1Oi_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl1Oi.width_data = 4,
		nl1Oi.width_sel = 2;
	oper_mux   nl1Ol
	( 
	.data({{2{1'b0}}, n0i0O, 1'b0}),
	.o(wire_nl1Ol_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl1Ol.width_data = 4,
		nl1Ol.width_sel = 2;
	oper_mux   nl1OO
	( 
	.data({{2{1'b0}}, n0iii, 1'b0}),
	.o(wire_nl1OO_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nl1OO.width_data = 4,
		nl1OO.width_sel = 2;
	oper_mux   nli0i
	( 
	.data({{2{1'b0}}, n0lll, 1'b0}),
	.o(wire_nli0i_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nli0i.width_data = 4,
		nli0i.width_sel = 2;
	oper_mux   nli0l
	( 
	.data({{2{1'b1}}, n00ll, 1'b0}),
	.o(wire_nli0l_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nli0l.width_data = 4,
		nli0l.width_sel = 2;
	oper_mux   nli0O
	( 
	.data({{2{1'b1}}, n00lO, 1'b0}),
	.o(wire_nli0O_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nli0O.width_data = 4,
		nli0O.width_sel = 2;
	oper_mux   nli1i
	( 
	.data({{2{1'b0}}, n0lil, 1'b0}),
	.o(wire_nli1i_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nli1i.width_data = 4,
		nli1i.width_sel = 2;
	oper_mux   nli1l
	( 
	.data({{2{1'b0}}, n0liO, 1'b0}),
	.o(wire_nli1l_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nli1l.width_data = 4,
		nli1l.width_sel = 2;
	oper_mux   nli1O
	( 
	.data({{2{1'b0}}, n0lli, 1'b0}),
	.o(wire_nli1O_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nli1O.width_data = 4,
		nli1O.width_sel = 2;
	oper_mux   nliii
	( 
	.data({{2{1'b1}}, n00Oi, 1'b0}),
	.o(wire_nliii_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nliii.width_data = 4,
		nliii.width_sel = 2;
	oper_mux   nliil
	( 
	.data({{2{1'b1}}, n00Ol, 1'b0}),
	.o(wire_nliil_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nliil.width_data = 4,
		nliil.width_sel = 2;
	oper_mux   nliiO
	( 
	.data({{2{1'b1}}, n00OO, 1'b0}),
	.o(wire_nliiO_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nliiO.width_data = 4,
		nliiO.width_sel = 2;
	oper_mux   nlili
	( 
	.data({{2{1'b1}}, n0i1i, 1'b0}),
	.o(wire_nlili_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nlili.width_data = 4,
		nlili.width_sel = 2;
	oper_mux   nlill
	( 
	.data({{2{1'b1}}, n0i1l, 1'b0}),
	.o(wire_nlill_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nlill.width_data = 4,
		nlill.width_sel = 2;
	oper_mux   nlilO
	( 
	.data({{2{1'b1}}, n0i1O, 1'b0}),
	.o(wire_nlilO_o),
	.sel({wire_nliOl_o, wire_nliOi_o}));
	defparam
		nlilO.width_data = 4,
		nlilO.width_sel = 2;
	oper_mux   nliOi
	( 
	.data({{3{1'b0}}, 1'b1}),
	.o(wire_nliOi_o),
	.sel({n1i0O, n1i0l}));
	defparam
		nliOi.width_data = 4,
		nliOi.width_sel = 2;
	oper_mux   nliOl
	( 
	.data({{3{1'b0}}, 1'b1, 1'b0, 1'b1, {2{1'b0}}}),
	.o(wire_nliOl_o),
	.sel({n1ill, n1i0O, n1i0l}));
	defparam
		nliOl.width_data = 8,
		nliOl.width_sel = 3;
	assign
		n10Ol = ((((((((~ a[23]) & (~ a[24])) & (~ a[25])) & (~ a[26])) & (~ a[27])) & (~ a[28])) & (~ a[29])) & (~ a[30])),
		n10OO = (((((((b[23] & b[24]) & b[25]) & b[26]) & b[27]) & b[28]) & b[29]) & b[30]),
		n1i0i = (((((((((((((((((((((((~ a[0]) & (~ a[1])) & (~ a[2])) & (~ a[3])) & (~ a[4])) & (~ a[5])) & (~ a[6])) & (~ a[7])) & (~ a[8])) & (~ a[9])) & (~ a[10])) & (~ a[11])) & (~ a[12])) & (~ a[13])) & (~ a[14])) & (~ a[15])) & (~ a[16])) & (~ a[17])) & (~ a[18])) & (~ a[19])) & (~ a[20])) & (~ a[21])) & (~ a[22])),
		n1i0l = ((n1iii & (~ nllii)) | ((n1iil & n1lli) | ((n1iiO & n1Oii) | (n1lli & n1Oii)))),
		n1i0O = ((n1iii & (~ nllil)) | ((n1iOi & n1iiO) | ((n1ilO & n1iil) | (n1iOi & n1ilO)))),
		n1i1i = (((((((((((((((((((((((~ b[0]) & (~ b[1])) & (~ b[2])) & (~ b[3])) & (~ b[4])) & (~ b[5])) & (~ b[6])) & (~ b[7])) & (~ b[8])) & (~ b[9])) & (~ b[10])) & (~ b[11])) & (~ b[12])) & (~ b[13])) & (~ b[14])) & (~ b[15])) & (~ b[16])) & (~ b[17])) & (~ b[18])) & (~ b[19])) & (~ b[20])) & (~ b[21])) & (~ b[22])),
		n1i1l = ((((((((~ b[23]) & (~ b[24])) & (~ b[25])) & (~ b[26])) & (~ b[27])) & (~ b[28])) & (~ b[29])) & (~ b[30])),
		n1i1O = (((((((a[23] & a[24]) & a[25]) & a[26]) & a[27]) & a[28]) & a[29]) & a[30]),
		n1iii = (n1iiO & n1iil),
		n1iil = ((~ n1l0O) & (~ n1Oii)),
		n1iiO = ((~ n1lli) & (~ n1O1O)),
		n1ili = 1'b1,
		n1ill = (((n1iOi & n1lli) | (n1ilO & n1Oii)) | (((~ n1lOl) & n1O1O) | ((~ n1l1l) & n1l0O))),
		n1ilO = (n1lOl & n1O1O),
		n1iOi = (n1l1l & n1l0O),
		q = {((~ n1ill) & n1Oll), wire_nlilO_o, wire_nlill_o, wire_nlili_o, wire_nliiO_o, wire_nliil_o, wire_nliii_o, wire_nli0O_o, wire_nli0l_o, wire_nli0i_o, wire_nli1O_o, wire_nli1l_o, wire_nli1i_o, wire_nl0OO_o, wire_nl0Ol_o, wire_nl0Oi_o, wire_nl0lO_o, wire_nl0ll_o, wire_nl0li_o, wire_nl0iO_o, wire_nl0il_o, wire_nl0ii_o, wire_nl00O_o, wire_nl00l_o, wire_nl00i_o, wire_nl01O_o, wire_nl01l_o, wire_nl01i_o, wire_nl1OO_o, wire_nl1Ol_o, wire_nl1Oi_o, wire_nl1lO_o};
endmodule //fptest
//synopsys translate_on
//VALID FILE
