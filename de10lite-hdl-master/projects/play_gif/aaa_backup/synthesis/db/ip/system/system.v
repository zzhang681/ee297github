// system.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system (
		input  wire         clk_clk,               //           clk.clk
		output wire         clk_100_clk,           //       clk_100.clk
		output wire         clk_25_clk,            //        clk_25.clk
		output wire [7:0]   framecount_export,     //    framecount.export
		output wire [7:0]   imagecount_export,     //    imagecount.export
		input  wire [25:0]  interface_address,     //     interface.address
		input  wire [15:0]  interface_byte_enable, //              .byte_enable
		input  wire         interface_read,        //              .read
		input  wire         interface_write,       //              .write
		input  wire [127:0] interface_write_data,  //              .write_data
		output wire         interface_acknowledge, //              .acknowledge
		output wire [127:0] interface_read_data,   //              .read_data
		input  wire         reset_reset_n,         //         reset.reset_n
		output wire [12:0]  sdram_addr,            //         sdram.addr
		output wire [1:0]   sdram_ba,              //              .ba
		output wire         sdram_cas_n,           //              .cas_n
		output wire         sdram_cke,             //              .cke
		output wire         sdram_cs_n,            //              .cs_n
		inout  wire [15:0]  sdram_dq,              //              .dq
		output wire [1:0]   sdram_dqm,             //              .dqm
		output wire         sdram_ras_n,           //              .ras_n
		output wire         sdram_we_n,            //              .we_n
		output wire         sdram_clk_100_clk      // sdram_clk_100.clk
	);

	wire  [127:0] bridge_0_avalon_master_readdata;                     // mm_interconnect_0:bridge_0_avalon_master_readdata -> bridge_0:avalon_readdata
	wire          bridge_0_avalon_master_waitrequest;                  // mm_interconnect_0:bridge_0_avalon_master_waitrequest -> bridge_0:avalon_waitrequest
	wire   [15:0] bridge_0_avalon_master_byteenable;                   // bridge_0:avalon_byteenable -> mm_interconnect_0:bridge_0_avalon_master_byteenable
	wire          bridge_0_avalon_master_read;                         // bridge_0:avalon_read -> mm_interconnect_0:bridge_0_avalon_master_read
	wire   [25:0] bridge_0_avalon_master_address;                      // bridge_0:avalon_address -> mm_interconnect_0:bridge_0_avalon_master_address
	wire          bridge_0_avalon_master_write;                        // bridge_0:avalon_write -> mm_interconnect_0:bridge_0_avalon_master_write
	wire  [127:0] bridge_0_avalon_master_writedata;                    // bridge_0:avalon_writedata -> mm_interconnect_0:bridge_0_avalon_master_writedata
	wire   [31:0] jtag_master_master_readdata;                         // mm_interconnect_0:jtag_master_master_readdata -> jtag_master:master_readdata
	wire          jtag_master_master_waitrequest;                      // mm_interconnect_0:jtag_master_master_waitrequest -> jtag_master:master_waitrequest
	wire   [31:0] jtag_master_master_address;                          // jtag_master:master_address -> mm_interconnect_0:jtag_master_master_address
	wire          jtag_master_master_read;                             // jtag_master:master_read -> mm_interconnect_0:jtag_master_master_read
	wire    [3:0] jtag_master_master_byteenable;                       // jtag_master:master_byteenable -> mm_interconnect_0:jtag_master_master_byteenable
	wire          jtag_master_master_readdatavalid;                    // mm_interconnect_0:jtag_master_master_readdatavalid -> jtag_master:master_readdatavalid
	wire          jtag_master_master_write;                            // jtag_master:master_write -> mm_interconnect_0:jtag_master_master_write
	wire   [31:0] jtag_master_master_writedata;                        // jtag_master:master_writedata -> mm_interconnect_0:jtag_master_master_writedata
	wire          mm_interconnect_0_sdram_controller_s1_chipselect;    // mm_interconnect_0:sdram_controller_s1_chipselect -> sdram_controller:az_cs
	wire   [15:0] mm_interconnect_0_sdram_controller_s1_readdata;      // sdram_controller:za_data -> mm_interconnect_0:sdram_controller_s1_readdata
	wire          mm_interconnect_0_sdram_controller_s1_waitrequest;   // sdram_controller:za_waitrequest -> mm_interconnect_0:sdram_controller_s1_waitrequest
	wire   [24:0] mm_interconnect_0_sdram_controller_s1_address;       // mm_interconnect_0:sdram_controller_s1_address -> sdram_controller:az_addr
	wire          mm_interconnect_0_sdram_controller_s1_read;          // mm_interconnect_0:sdram_controller_s1_read -> sdram_controller:az_rd_n
	wire    [1:0] mm_interconnect_0_sdram_controller_s1_byteenable;    // mm_interconnect_0:sdram_controller_s1_byteenable -> sdram_controller:az_be_n
	wire          mm_interconnect_0_sdram_controller_s1_readdatavalid; // sdram_controller:za_valid -> mm_interconnect_0:sdram_controller_s1_readdatavalid
	wire          mm_interconnect_0_sdram_controller_s1_write;         // mm_interconnect_0:sdram_controller_s1_write -> sdram_controller:az_wr_n
	wire   [15:0] mm_interconnect_0_sdram_controller_s1_writedata;     // mm_interconnect_0:sdram_controller_s1_writedata -> sdram_controller:az_data
	wire   [31:0] mm_interconnect_0_altpll_0_pll_slave_readdata;       // altpll_0:readdata -> mm_interconnect_0:altpll_0_pll_slave_readdata
	wire    [1:0] mm_interconnect_0_altpll_0_pll_slave_address;        // mm_interconnect_0:altpll_0_pll_slave_address -> altpll_0:address
	wire          mm_interconnect_0_altpll_0_pll_slave_read;           // mm_interconnect_0:altpll_0_pll_slave_read -> altpll_0:read
	wire          mm_interconnect_0_altpll_0_pll_slave_write;          // mm_interconnect_0:altpll_0_pll_slave_write -> altpll_0:write
	wire   [31:0] mm_interconnect_0_altpll_0_pll_slave_writedata;      // mm_interconnect_0:altpll_0_pll_slave_writedata -> altpll_0:writedata
	wire          mm_interconnect_0_framecount_s1_chipselect;          // mm_interconnect_0:framecount_s1_chipselect -> framecount:chipselect
	wire   [31:0] mm_interconnect_0_framecount_s1_readdata;            // framecount:readdata -> mm_interconnect_0:framecount_s1_readdata
	wire    [1:0] mm_interconnect_0_framecount_s1_address;             // mm_interconnect_0:framecount_s1_address -> framecount:address
	wire          mm_interconnect_0_framecount_s1_write;               // mm_interconnect_0:framecount_s1_write -> framecount:write_n
	wire   [31:0] mm_interconnect_0_framecount_s1_writedata;           // mm_interconnect_0:framecount_s1_writedata -> framecount:writedata
	wire          mm_interconnect_0_imagecount_s1_chipselect;          // mm_interconnect_0:imagecount_s1_chipselect -> imagecount:chipselect
	wire   [31:0] mm_interconnect_0_imagecount_s1_readdata;            // imagecount:readdata -> mm_interconnect_0:imagecount_s1_readdata
	wire    [1:0] mm_interconnect_0_imagecount_s1_address;             // mm_interconnect_0:imagecount_s1_address -> imagecount:address
	wire          mm_interconnect_0_imagecount_s1_write;               // mm_interconnect_0:imagecount_s1_write -> imagecount:write_n
	wire   [31:0] mm_interconnect_0_imagecount_s1_writedata;           // mm_interconnect_0:imagecount_s1_writedata -> imagecount:writedata
	wire          rst_controller_reset_out_reset;                      // rst_controller:reset_out -> [altpll_0:reset, mm_interconnect_0:altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, mm_interconnect_0:jtag_master_clk_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_001_reset_out_reset;                  // rst_controller_001:reset_out -> [bridge_0:reset, mm_interconnect_0:bridge_0_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_002_reset_out_reset;                  // rst_controller_002:reset_out -> [framecount:reset_n, imagecount:reset_n, mm_interconnect_0:sdram_controller_reset_reset_bridge_in_reset_reset, sdram_controller:reset_n]
	wire          jtag_master_master_reset_reset;                      // jtag_master:master_reset_reset -> rst_controller_002:reset_in0

	system_altpll_0 altpll_0 (
		.clk                (clk_clk),                                        //       inclk_interface.clk
		.reset              (rst_controller_reset_out_reset),                 // inclk_interface_reset.reset
		.read               (mm_interconnect_0_altpll_0_pll_slave_read),      //             pll_slave.read
		.write              (mm_interconnect_0_altpll_0_pll_slave_write),     //                      .write
		.address            (mm_interconnect_0_altpll_0_pll_slave_address),   //                      .address
		.readdata           (mm_interconnect_0_altpll_0_pll_slave_readdata),  //                      .readdata
		.writedata          (mm_interconnect_0_altpll_0_pll_slave_writedata), //                      .writedata
		.c0                 (clk_100_clk),                                    //                    c0.clk
		.c1                 (clk_25_clk),                                     //                    c1.clk
		.c2                 (sdram_clk_100_clk),                              //                    c2.clk
		.scandone           (),                                               //           (terminated)
		.scandataout        (),                                               //           (terminated)
		.c3                 (),                                               //           (terminated)
		.c4                 (),                                               //           (terminated)
		.areset             (1'b0),                                           //           (terminated)
		.locked             (),                                               //           (terminated)
		.phasedone          (),                                               //           (terminated)
		.phasecounterselect (3'b000),                                         //           (terminated)
		.phaseupdown        (1'b0),                                           //           (terminated)
		.phasestep          (1'b0),                                           //           (terminated)
		.scanclk            (1'b0),                                           //           (terminated)
		.scanclkena         (1'b0),                                           //           (terminated)
		.scandata           (1'b0),                                           //           (terminated)
		.configupdate       (1'b0)                                            //           (terminated)
	);

	system_bridge_0 bridge_0 (
		.clk                (clk_100_clk),                        //                clk.clk
		.reset              (rst_controller_001_reset_out_reset), //              reset.reset
		.avalon_readdata    (bridge_0_avalon_master_readdata),    //      avalon_master.readdata
		.avalon_waitrequest (bridge_0_avalon_master_waitrequest), //                   .waitrequest
		.avalon_byteenable  (bridge_0_avalon_master_byteenable),  //                   .byteenable
		.avalon_read        (bridge_0_avalon_master_read),        //                   .read
		.avalon_write       (bridge_0_avalon_master_write),       //                   .write
		.avalon_writedata   (bridge_0_avalon_master_writedata),   //                   .writedata
		.avalon_address     (bridge_0_avalon_master_address),     //                   .address
		.address            (interface_address),                  // external_interface.export
		.byte_enable        (interface_byte_enable),              //                   .export
		.read               (interface_read),                     //                   .export
		.write              (interface_write),                    //                   .export
		.write_data         (interface_write_data),               //                   .export
		.acknowledge        (interface_acknowledge),              //                   .export
		.read_data          (interface_read_data)                 //                   .export
	);

	system_framecount framecount (
		.clk        (clk_100_clk),                                //                 clk.clk
		.reset_n    (~rst_controller_002_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_framecount_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_framecount_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_framecount_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_framecount_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_framecount_s1_readdata),   //                    .readdata
		.out_port   (framecount_export)                           // external_connection.export
	);

	system_framecount imagecount (
		.clk        (clk_100_clk),                                //                 clk.clk
		.reset_n    (~rst_controller_002_reset_out_reset),        //               reset.reset_n
		.address    (mm_interconnect_0_imagecount_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_imagecount_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_imagecount_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_imagecount_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_imagecount_s1_readdata),   //                    .readdata
		.out_port   (imagecount_export)                           // external_connection.export
	);

	system_jtag_master #(
		.USE_PLI     (1),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) jtag_master (
		.clk_clk              (clk_clk),                          //          clk.clk
		.clk_reset_reset      (~reset_reset_n),                   //    clk_reset.reset
		.master_address       (jtag_master_master_address),       //       master.address
		.master_readdata      (jtag_master_master_readdata),      //             .readdata
		.master_read          (jtag_master_master_read),          //             .read
		.master_write         (jtag_master_master_write),         //             .write
		.master_writedata     (jtag_master_master_writedata),     //             .writedata
		.master_waitrequest   (jtag_master_master_waitrequest),   //             .waitrequest
		.master_readdatavalid (jtag_master_master_readdatavalid), //             .readdatavalid
		.master_byteenable    (jtag_master_master_byteenable),    //             .byteenable
		.master_reset_reset   (jtag_master_master_reset_reset)    // master_reset.reset
	);

	system_sdram_controller sdram_controller (
		.clk            (clk_100_clk),                                         //   clk.clk
		.reset_n        (~rst_controller_002_reset_out_reset),                 // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_controller_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_controller_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_controller_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_controller_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_controller_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_controller_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_controller_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_controller_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_controller_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_addr),                                          //  wire.export
		.zs_ba          (sdram_ba),                                            //      .export
		.zs_cas_n       (sdram_cas_n),                                         //      .export
		.zs_cke         (sdram_cke),                                           //      .export
		.zs_cs_n        (sdram_cs_n),                                          //      .export
		.zs_dq          (sdram_dq),                                            //      .export
		.zs_dqm         (sdram_dqm),                                           //      .export
		.zs_ras_n       (sdram_ras_n),                                         //      .export
		.zs_we_n        (sdram_we_n)                                           //      .export
	);

	system_mm_interconnect_0 mm_interconnect_0 (
		.altpll_0_c0_clk                                            (clk_100_clk),                                         //                                          altpll_0_c0.clk
		.clk_0_clk_clk                                              (clk_clk),                                             //                                            clk_0_clk.clk
		.altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                      // altpll_0_inclk_interface_reset_reset_bridge_in_reset.reset
		.bridge_0_reset_reset_bridge_in_reset_reset                 (rst_controller_001_reset_out_reset),                  //                 bridge_0_reset_reset_bridge_in_reset.reset
		.jtag_master_clk_reset_reset_bridge_in_reset_reset          (rst_controller_reset_out_reset),                      //          jtag_master_clk_reset_reset_bridge_in_reset.reset
		.sdram_controller_reset_reset_bridge_in_reset_reset         (rst_controller_002_reset_out_reset),                  //         sdram_controller_reset_reset_bridge_in_reset.reset
		.bridge_0_avalon_master_address                             (bridge_0_avalon_master_address),                      //                               bridge_0_avalon_master.address
		.bridge_0_avalon_master_waitrequest                         (bridge_0_avalon_master_waitrequest),                  //                                                     .waitrequest
		.bridge_0_avalon_master_byteenable                          (bridge_0_avalon_master_byteenable),                   //                                                     .byteenable
		.bridge_0_avalon_master_read                                (bridge_0_avalon_master_read),                         //                                                     .read
		.bridge_0_avalon_master_readdata                            (bridge_0_avalon_master_readdata),                     //                                                     .readdata
		.bridge_0_avalon_master_write                               (bridge_0_avalon_master_write),                        //                                                     .write
		.bridge_0_avalon_master_writedata                           (bridge_0_avalon_master_writedata),                    //                                                     .writedata
		.jtag_master_master_address                                 (jtag_master_master_address),                          //                                   jtag_master_master.address
		.jtag_master_master_waitrequest                             (jtag_master_master_waitrequest),                      //                                                     .waitrequest
		.jtag_master_master_byteenable                              (jtag_master_master_byteenable),                       //                                                     .byteenable
		.jtag_master_master_read                                    (jtag_master_master_read),                             //                                                     .read
		.jtag_master_master_readdata                                (jtag_master_master_readdata),                         //                                                     .readdata
		.jtag_master_master_readdatavalid                           (jtag_master_master_readdatavalid),                    //                                                     .readdatavalid
		.jtag_master_master_write                                   (jtag_master_master_write),                            //                                                     .write
		.jtag_master_master_writedata                               (jtag_master_master_writedata),                        //                                                     .writedata
		.altpll_0_pll_slave_address                                 (mm_interconnect_0_altpll_0_pll_slave_address),        //                                   altpll_0_pll_slave.address
		.altpll_0_pll_slave_write                                   (mm_interconnect_0_altpll_0_pll_slave_write),          //                                                     .write
		.altpll_0_pll_slave_read                                    (mm_interconnect_0_altpll_0_pll_slave_read),           //                                                     .read
		.altpll_0_pll_slave_readdata                                (mm_interconnect_0_altpll_0_pll_slave_readdata),       //                                                     .readdata
		.altpll_0_pll_slave_writedata                               (mm_interconnect_0_altpll_0_pll_slave_writedata),      //                                                     .writedata
		.framecount_s1_address                                      (mm_interconnect_0_framecount_s1_address),             //                                        framecount_s1.address
		.framecount_s1_write                                        (mm_interconnect_0_framecount_s1_write),               //                                                     .write
		.framecount_s1_readdata                                     (mm_interconnect_0_framecount_s1_readdata),            //                                                     .readdata
		.framecount_s1_writedata                                    (mm_interconnect_0_framecount_s1_writedata),           //                                                     .writedata
		.framecount_s1_chipselect                                   (mm_interconnect_0_framecount_s1_chipselect),          //                                                     .chipselect
		.imagecount_s1_address                                      (mm_interconnect_0_imagecount_s1_address),             //                                        imagecount_s1.address
		.imagecount_s1_write                                        (mm_interconnect_0_imagecount_s1_write),               //                                                     .write
		.imagecount_s1_readdata                                     (mm_interconnect_0_imagecount_s1_readdata),            //                                                     .readdata
		.imagecount_s1_writedata                                    (mm_interconnect_0_imagecount_s1_writedata),           //                                                     .writedata
		.imagecount_s1_chipselect                                   (mm_interconnect_0_imagecount_s1_chipselect),          //                                                     .chipselect
		.sdram_controller_s1_address                                (mm_interconnect_0_sdram_controller_s1_address),       //                                  sdram_controller_s1.address
		.sdram_controller_s1_write                                  (mm_interconnect_0_sdram_controller_s1_write),         //                                                     .write
		.sdram_controller_s1_read                                   (mm_interconnect_0_sdram_controller_s1_read),          //                                                     .read
		.sdram_controller_s1_readdata                               (mm_interconnect_0_sdram_controller_s1_readdata),      //                                                     .readdata
		.sdram_controller_s1_writedata                              (mm_interconnect_0_sdram_controller_s1_writedata),     //                                                     .writedata
		.sdram_controller_s1_byteenable                             (mm_interconnect_0_sdram_controller_s1_byteenable),    //                                                     .byteenable
		.sdram_controller_s1_readdatavalid                          (mm_interconnect_0_sdram_controller_s1_readdatavalid), //                                                     .readdatavalid
		.sdram_controller_s1_waitrequest                            (mm_interconnect_0_sdram_controller_s1_waitrequest),   //                                                     .waitrequest
		.sdram_controller_s1_chipselect                             (mm_interconnect_0_sdram_controller_s1_chipselect)     //                                                     .chipselect
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_100_clk),                        //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (jtag_master_master_reset_reset),     // reset_in0.reset
		.clk            (clk_100_clk),                        //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
