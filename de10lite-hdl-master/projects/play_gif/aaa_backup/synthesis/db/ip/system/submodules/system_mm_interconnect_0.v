// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire         altpll_0_c0_clk,                                            //                                          altpll_0_c0.clk
		input  wire         clk_0_clk_clk,                                              //                                            clk_0_clk.clk
		input  wire         altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, // altpll_0_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire         bridge_0_reset_reset_bridge_in_reset_reset,                 //                 bridge_0_reset_reset_bridge_in_reset.reset
		input  wire         jtag_master_clk_reset_reset_bridge_in_reset_reset,          //          jtag_master_clk_reset_reset_bridge_in_reset.reset
		input  wire         sdram_controller_reset_reset_bridge_in_reset_reset,         //         sdram_controller_reset_reset_bridge_in_reset.reset
		input  wire [25:0]  bridge_0_avalon_master_address,                             //                               bridge_0_avalon_master.address
		output wire         bridge_0_avalon_master_waitrequest,                         //                                                     .waitrequest
		input  wire [15:0]  bridge_0_avalon_master_byteenable,                          //                                                     .byteenable
		input  wire         bridge_0_avalon_master_read,                                //                                                     .read
		output wire [127:0] bridge_0_avalon_master_readdata,                            //                                                     .readdata
		input  wire         bridge_0_avalon_master_write,                               //                                                     .write
		input  wire [127:0] bridge_0_avalon_master_writedata,                           //                                                     .writedata
		input  wire [31:0]  jtag_master_master_address,                                 //                                   jtag_master_master.address
		output wire         jtag_master_master_waitrequest,                             //                                                     .waitrequest
		input  wire [3:0]   jtag_master_master_byteenable,                              //                                                     .byteenable
		input  wire         jtag_master_master_read,                                    //                                                     .read
		output wire [31:0]  jtag_master_master_readdata,                                //                                                     .readdata
		output wire         jtag_master_master_readdatavalid,                           //                                                     .readdatavalid
		input  wire         jtag_master_master_write,                                   //                                                     .write
		input  wire [31:0]  jtag_master_master_writedata,                               //                                                     .writedata
		output wire [1:0]   altpll_0_pll_slave_address,                                 //                                   altpll_0_pll_slave.address
		output wire         altpll_0_pll_slave_write,                                   //                                                     .write
		output wire         altpll_0_pll_slave_read,                                    //                                                     .read
		input  wire [31:0]  altpll_0_pll_slave_readdata,                                //                                                     .readdata
		output wire [31:0]  altpll_0_pll_slave_writedata,                               //                                                     .writedata
		output wire [1:0]   framecount_s1_address,                                      //                                        framecount_s1.address
		output wire         framecount_s1_write,                                        //                                                     .write
		input  wire [31:0]  framecount_s1_readdata,                                     //                                                     .readdata
		output wire [31:0]  framecount_s1_writedata,                                    //                                                     .writedata
		output wire         framecount_s1_chipselect,                                   //                                                     .chipselect
		output wire [1:0]   imagecount_s1_address,                                      //                                        imagecount_s1.address
		output wire         imagecount_s1_write,                                        //                                                     .write
		input  wire [31:0]  imagecount_s1_readdata,                                     //                                                     .readdata
		output wire [31:0]  imagecount_s1_writedata,                                    //                                                     .writedata
		output wire         imagecount_s1_chipselect,                                   //                                                     .chipselect
		output wire [24:0]  sdram_controller_s1_address,                                //                                  sdram_controller_s1.address
		output wire         sdram_controller_s1_write,                                  //                                                     .write
		output wire         sdram_controller_s1_read,                                   //                                                     .read
		input  wire [15:0]  sdram_controller_s1_readdata,                               //                                                     .readdata
		output wire [15:0]  sdram_controller_s1_writedata,                              //                                                     .writedata
		output wire [1:0]   sdram_controller_s1_byteenable,                             //                                                     .byteenable
		input  wire         sdram_controller_s1_readdatavalid,                          //                                                     .readdatavalid
		input  wire         sdram_controller_s1_waitrequest,                            //                                                     .waitrequest
		output wire         sdram_controller_s1_chipselect                              //                                                     .chipselect
	);

	wire          bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest;           // bridge_0_avalon_master_agent:av_waitrequest -> bridge_0_avalon_master_translator:uav_waitrequest
	wire  [127:0] bridge_0_avalon_master_translator_avalon_universal_master_0_readdata;              // bridge_0_avalon_master_agent:av_readdata -> bridge_0_avalon_master_translator:uav_readdata
	wire          bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess;           // bridge_0_avalon_master_translator:uav_debugaccess -> bridge_0_avalon_master_agent:av_debugaccess
	wire   [31:0] bridge_0_avalon_master_translator_avalon_universal_master_0_address;               // bridge_0_avalon_master_translator:uav_address -> bridge_0_avalon_master_agent:av_address
	wire          bridge_0_avalon_master_translator_avalon_universal_master_0_read;                  // bridge_0_avalon_master_translator:uav_read -> bridge_0_avalon_master_agent:av_read
	wire   [15:0] bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable;            // bridge_0_avalon_master_translator:uav_byteenable -> bridge_0_avalon_master_agent:av_byteenable
	wire          bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;         // bridge_0_avalon_master_agent:av_readdatavalid -> bridge_0_avalon_master_translator:uav_readdatavalid
	wire          bridge_0_avalon_master_translator_avalon_universal_master_0_lock;                  // bridge_0_avalon_master_translator:uav_lock -> bridge_0_avalon_master_agent:av_lock
	wire          bridge_0_avalon_master_translator_avalon_universal_master_0_write;                 // bridge_0_avalon_master_translator:uav_write -> bridge_0_avalon_master_agent:av_write
	wire  [127:0] bridge_0_avalon_master_translator_avalon_universal_master_0_writedata;             // bridge_0_avalon_master_translator:uav_writedata -> bridge_0_avalon_master_agent:av_writedata
	wire    [4:0] bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount;            // bridge_0_avalon_master_translator:uav_burstcount -> bridge_0_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> bridge_0_avalon_master_agent:rp_valid
	wire  [213:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> bridge_0_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                 // bridge_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> bridge_0_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> bridge_0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> bridge_0_avalon_master_agent:rp_endofpacket
	wire          jtag_master_master_translator_avalon_universal_master_0_waitrequest;               // jtag_master_master_agent:av_waitrequest -> jtag_master_master_translator:uav_waitrequest
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_readdata;                  // jtag_master_master_agent:av_readdata -> jtag_master_master_translator:uav_readdata
	wire          jtag_master_master_translator_avalon_universal_master_0_debugaccess;               // jtag_master_master_translator:uav_debugaccess -> jtag_master_master_agent:av_debugaccess
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_address;                   // jtag_master_master_translator:uav_address -> jtag_master_master_agent:av_address
	wire          jtag_master_master_translator_avalon_universal_master_0_read;                      // jtag_master_master_translator:uav_read -> jtag_master_master_agent:av_read
	wire    [3:0] jtag_master_master_translator_avalon_universal_master_0_byteenable;                // jtag_master_master_translator:uav_byteenable -> jtag_master_master_agent:av_byteenable
	wire          jtag_master_master_translator_avalon_universal_master_0_readdatavalid;             // jtag_master_master_agent:av_readdatavalid -> jtag_master_master_translator:uav_readdatavalid
	wire          jtag_master_master_translator_avalon_universal_master_0_lock;                      // jtag_master_master_translator:uav_lock -> jtag_master_master_agent:av_lock
	wire          jtag_master_master_translator_avalon_universal_master_0_write;                     // jtag_master_master_translator:uav_write -> jtag_master_master_agent:av_write
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_writedata;                 // jtag_master_master_translator:uav_writedata -> jtag_master_master_agent:av_writedata
	wire    [2:0] jtag_master_master_translator_avalon_universal_master_0_burstcount;                // jtag_master_master_translator:uav_burstcount -> jtag_master_master_agent:av_burstcount
	wire   [15:0] sdram_controller_s1_agent_m0_readdata;                                             // sdram_controller_s1_translator:uav_readdata -> sdram_controller_s1_agent:m0_readdata
	wire          sdram_controller_s1_agent_m0_waitrequest;                                          // sdram_controller_s1_translator:uav_waitrequest -> sdram_controller_s1_agent:m0_waitrequest
	wire          sdram_controller_s1_agent_m0_debugaccess;                                          // sdram_controller_s1_agent:m0_debugaccess -> sdram_controller_s1_translator:uav_debugaccess
	wire   [31:0] sdram_controller_s1_agent_m0_address;                                              // sdram_controller_s1_agent:m0_address -> sdram_controller_s1_translator:uav_address
	wire    [1:0] sdram_controller_s1_agent_m0_byteenable;                                           // sdram_controller_s1_agent:m0_byteenable -> sdram_controller_s1_translator:uav_byteenable
	wire          sdram_controller_s1_agent_m0_read;                                                 // sdram_controller_s1_agent:m0_read -> sdram_controller_s1_translator:uav_read
	wire          sdram_controller_s1_agent_m0_readdatavalid;                                        // sdram_controller_s1_translator:uav_readdatavalid -> sdram_controller_s1_agent:m0_readdatavalid
	wire          sdram_controller_s1_agent_m0_lock;                                                 // sdram_controller_s1_agent:m0_lock -> sdram_controller_s1_translator:uav_lock
	wire   [15:0] sdram_controller_s1_agent_m0_writedata;                                            // sdram_controller_s1_agent:m0_writedata -> sdram_controller_s1_translator:uav_writedata
	wire          sdram_controller_s1_agent_m0_write;                                                // sdram_controller_s1_agent:m0_write -> sdram_controller_s1_translator:uav_write
	wire    [1:0] sdram_controller_s1_agent_m0_burstcount;                                           // sdram_controller_s1_agent:m0_burstcount -> sdram_controller_s1_translator:uav_burstcount
	wire          sdram_controller_s1_agent_rf_source_valid;                                         // sdram_controller_s1_agent:rf_source_valid -> sdram_controller_s1_agent_rsp_fifo:in_valid
	wire   [88:0] sdram_controller_s1_agent_rf_source_data;                                          // sdram_controller_s1_agent:rf_source_data -> sdram_controller_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_s1_agent_rf_source_ready;                                         // sdram_controller_s1_agent_rsp_fifo:in_ready -> sdram_controller_s1_agent:rf_source_ready
	wire          sdram_controller_s1_agent_rf_source_startofpacket;                                 // sdram_controller_s1_agent:rf_source_startofpacket -> sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_s1_agent_rf_source_endofpacket;                                   // sdram_controller_s1_agent:rf_source_endofpacket -> sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_valid;                                      // sdram_controller_s1_agent_rsp_fifo:out_valid -> sdram_controller_s1_agent:rf_sink_valid
	wire   [88:0] sdram_controller_s1_agent_rsp_fifo_out_data;                                       // sdram_controller_s1_agent_rsp_fifo:out_data -> sdram_controller_s1_agent:rf_sink_data
	wire          sdram_controller_s1_agent_rsp_fifo_out_ready;                                      // sdram_controller_s1_agent:rf_sink_ready -> sdram_controller_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_s1_agent_rsp_fifo_out_startofpacket;                              // sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_endofpacket;                                // sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_s1_agent:rf_sink_endofpacket
	wire          sdram_controller_s1_agent_rdata_fifo_src_valid;                                    // sdram_controller_s1_agent:rdata_fifo_src_valid -> sdram_controller_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_s1_agent_rdata_fifo_src_data;                                     // sdram_controller_s1_agent:rdata_fifo_src_data -> sdram_controller_s1_agent_rdata_fifo:in_data
	wire          sdram_controller_s1_agent_rdata_fifo_src_ready;                                    // sdram_controller_s1_agent_rdata_fifo:in_ready -> sdram_controller_s1_agent:rdata_fifo_src_ready
	wire   [31:0] altpll_0_pll_slave_agent_m0_readdata;                                              // altpll_0_pll_slave_translator:uav_readdata -> altpll_0_pll_slave_agent:m0_readdata
	wire          altpll_0_pll_slave_agent_m0_waitrequest;                                           // altpll_0_pll_slave_translator:uav_waitrequest -> altpll_0_pll_slave_agent:m0_waitrequest
	wire          altpll_0_pll_slave_agent_m0_debugaccess;                                           // altpll_0_pll_slave_agent:m0_debugaccess -> altpll_0_pll_slave_translator:uav_debugaccess
	wire   [31:0] altpll_0_pll_slave_agent_m0_address;                                               // altpll_0_pll_slave_agent:m0_address -> altpll_0_pll_slave_translator:uav_address
	wire    [3:0] altpll_0_pll_slave_agent_m0_byteenable;                                            // altpll_0_pll_slave_agent:m0_byteenable -> altpll_0_pll_slave_translator:uav_byteenable
	wire          altpll_0_pll_slave_agent_m0_read;                                                  // altpll_0_pll_slave_agent:m0_read -> altpll_0_pll_slave_translator:uav_read
	wire          altpll_0_pll_slave_agent_m0_readdatavalid;                                         // altpll_0_pll_slave_translator:uav_readdatavalid -> altpll_0_pll_slave_agent:m0_readdatavalid
	wire          altpll_0_pll_slave_agent_m0_lock;                                                  // altpll_0_pll_slave_agent:m0_lock -> altpll_0_pll_slave_translator:uav_lock
	wire   [31:0] altpll_0_pll_slave_agent_m0_writedata;                                             // altpll_0_pll_slave_agent:m0_writedata -> altpll_0_pll_slave_translator:uav_writedata
	wire          altpll_0_pll_slave_agent_m0_write;                                                 // altpll_0_pll_slave_agent:m0_write -> altpll_0_pll_slave_translator:uav_write
	wire    [2:0] altpll_0_pll_slave_agent_m0_burstcount;                                            // altpll_0_pll_slave_agent:m0_burstcount -> altpll_0_pll_slave_translator:uav_burstcount
	wire          altpll_0_pll_slave_agent_rf_source_valid;                                          // altpll_0_pll_slave_agent:rf_source_valid -> altpll_0_pll_slave_agent_rsp_fifo:in_valid
	wire  [106:0] altpll_0_pll_slave_agent_rf_source_data;                                           // altpll_0_pll_slave_agent:rf_source_data -> altpll_0_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_0_pll_slave_agent_rf_source_ready;                                          // altpll_0_pll_slave_agent_rsp_fifo:in_ready -> altpll_0_pll_slave_agent:rf_source_ready
	wire          altpll_0_pll_slave_agent_rf_source_startofpacket;                                  // altpll_0_pll_slave_agent:rf_source_startofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_0_pll_slave_agent_rf_source_endofpacket;                                    // altpll_0_pll_slave_agent:rf_source_endofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_valid;                                       // altpll_0_pll_slave_agent_rsp_fifo:out_valid -> altpll_0_pll_slave_agent:rf_sink_valid
	wire  [106:0] altpll_0_pll_slave_agent_rsp_fifo_out_data;                                        // altpll_0_pll_slave_agent_rsp_fifo:out_data -> altpll_0_pll_slave_agent:rf_sink_data
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_ready;                                       // altpll_0_pll_slave_agent:rf_sink_ready -> altpll_0_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket;                               // altpll_0_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_0_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket;                                 // altpll_0_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_0_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_0_pll_slave_agent_rdata_fifo_src_valid;                                     // altpll_0_pll_slave_agent:rdata_fifo_src_valid -> altpll_0_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_0_pll_slave_agent_rdata_fifo_src_data;                                      // altpll_0_pll_slave_agent:rdata_fifo_src_data -> altpll_0_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_0_pll_slave_agent_rdata_fifo_src_ready;                                     // altpll_0_pll_slave_agent_rdata_fifo:in_ready -> altpll_0_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                             // cmd_mux_001:src_valid -> altpll_0_pll_slave_agent:cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                                              // cmd_mux_001:src_data -> altpll_0_pll_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                             // altpll_0_pll_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                           // cmd_mux_001:src_channel -> altpll_0_pll_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                     // cmd_mux_001:src_startofpacket -> altpll_0_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                       // cmd_mux_001:src_endofpacket -> altpll_0_pll_slave_agent:cp_endofpacket
	wire   [31:0] framecount_s1_agent_m0_readdata;                                                   // framecount_s1_translator:uav_readdata -> framecount_s1_agent:m0_readdata
	wire          framecount_s1_agent_m0_waitrequest;                                                // framecount_s1_translator:uav_waitrequest -> framecount_s1_agent:m0_waitrequest
	wire          framecount_s1_agent_m0_debugaccess;                                                // framecount_s1_agent:m0_debugaccess -> framecount_s1_translator:uav_debugaccess
	wire   [31:0] framecount_s1_agent_m0_address;                                                    // framecount_s1_agent:m0_address -> framecount_s1_translator:uav_address
	wire    [3:0] framecount_s1_agent_m0_byteenable;                                                 // framecount_s1_agent:m0_byteenable -> framecount_s1_translator:uav_byteenable
	wire          framecount_s1_agent_m0_read;                                                       // framecount_s1_agent:m0_read -> framecount_s1_translator:uav_read
	wire          framecount_s1_agent_m0_readdatavalid;                                              // framecount_s1_translator:uav_readdatavalid -> framecount_s1_agent:m0_readdatavalid
	wire          framecount_s1_agent_m0_lock;                                                       // framecount_s1_agent:m0_lock -> framecount_s1_translator:uav_lock
	wire   [31:0] framecount_s1_agent_m0_writedata;                                                  // framecount_s1_agent:m0_writedata -> framecount_s1_translator:uav_writedata
	wire          framecount_s1_agent_m0_write;                                                      // framecount_s1_agent:m0_write -> framecount_s1_translator:uav_write
	wire    [2:0] framecount_s1_agent_m0_burstcount;                                                 // framecount_s1_agent:m0_burstcount -> framecount_s1_translator:uav_burstcount
	wire          framecount_s1_agent_rf_source_valid;                                               // framecount_s1_agent:rf_source_valid -> framecount_s1_agent_rsp_fifo:in_valid
	wire  [106:0] framecount_s1_agent_rf_source_data;                                                // framecount_s1_agent:rf_source_data -> framecount_s1_agent_rsp_fifo:in_data
	wire          framecount_s1_agent_rf_source_ready;                                               // framecount_s1_agent_rsp_fifo:in_ready -> framecount_s1_agent:rf_source_ready
	wire          framecount_s1_agent_rf_source_startofpacket;                                       // framecount_s1_agent:rf_source_startofpacket -> framecount_s1_agent_rsp_fifo:in_startofpacket
	wire          framecount_s1_agent_rf_source_endofpacket;                                         // framecount_s1_agent:rf_source_endofpacket -> framecount_s1_agent_rsp_fifo:in_endofpacket
	wire          framecount_s1_agent_rsp_fifo_out_valid;                                            // framecount_s1_agent_rsp_fifo:out_valid -> framecount_s1_agent:rf_sink_valid
	wire  [106:0] framecount_s1_agent_rsp_fifo_out_data;                                             // framecount_s1_agent_rsp_fifo:out_data -> framecount_s1_agent:rf_sink_data
	wire          framecount_s1_agent_rsp_fifo_out_ready;                                            // framecount_s1_agent:rf_sink_ready -> framecount_s1_agent_rsp_fifo:out_ready
	wire          framecount_s1_agent_rsp_fifo_out_startofpacket;                                    // framecount_s1_agent_rsp_fifo:out_startofpacket -> framecount_s1_agent:rf_sink_startofpacket
	wire          framecount_s1_agent_rsp_fifo_out_endofpacket;                                      // framecount_s1_agent_rsp_fifo:out_endofpacket -> framecount_s1_agent:rf_sink_endofpacket
	wire          framecount_s1_agent_rdata_fifo_src_valid;                                          // framecount_s1_agent:rdata_fifo_src_valid -> framecount_s1_agent_rdata_fifo:in_valid
	wire   [33:0] framecount_s1_agent_rdata_fifo_src_data;                                           // framecount_s1_agent:rdata_fifo_src_data -> framecount_s1_agent_rdata_fifo:in_data
	wire          framecount_s1_agent_rdata_fifo_src_ready;                                          // framecount_s1_agent_rdata_fifo:in_ready -> framecount_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                             // cmd_mux_002:src_valid -> framecount_s1_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                              // cmd_mux_002:src_data -> framecount_s1_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                             // framecount_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                           // cmd_mux_002:src_channel -> framecount_s1_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                     // cmd_mux_002:src_startofpacket -> framecount_s1_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                       // cmd_mux_002:src_endofpacket -> framecount_s1_agent:cp_endofpacket
	wire   [31:0] imagecount_s1_agent_m0_readdata;                                                   // imagecount_s1_translator:uav_readdata -> imagecount_s1_agent:m0_readdata
	wire          imagecount_s1_agent_m0_waitrequest;                                                // imagecount_s1_translator:uav_waitrequest -> imagecount_s1_agent:m0_waitrequest
	wire          imagecount_s1_agent_m0_debugaccess;                                                // imagecount_s1_agent:m0_debugaccess -> imagecount_s1_translator:uav_debugaccess
	wire   [31:0] imagecount_s1_agent_m0_address;                                                    // imagecount_s1_agent:m0_address -> imagecount_s1_translator:uav_address
	wire    [3:0] imagecount_s1_agent_m0_byteenable;                                                 // imagecount_s1_agent:m0_byteenable -> imagecount_s1_translator:uav_byteenable
	wire          imagecount_s1_agent_m0_read;                                                       // imagecount_s1_agent:m0_read -> imagecount_s1_translator:uav_read
	wire          imagecount_s1_agent_m0_readdatavalid;                                              // imagecount_s1_translator:uav_readdatavalid -> imagecount_s1_agent:m0_readdatavalid
	wire          imagecount_s1_agent_m0_lock;                                                       // imagecount_s1_agent:m0_lock -> imagecount_s1_translator:uav_lock
	wire   [31:0] imagecount_s1_agent_m0_writedata;                                                  // imagecount_s1_agent:m0_writedata -> imagecount_s1_translator:uav_writedata
	wire          imagecount_s1_agent_m0_write;                                                      // imagecount_s1_agent:m0_write -> imagecount_s1_translator:uav_write
	wire    [2:0] imagecount_s1_agent_m0_burstcount;                                                 // imagecount_s1_agent:m0_burstcount -> imagecount_s1_translator:uav_burstcount
	wire          imagecount_s1_agent_rf_source_valid;                                               // imagecount_s1_agent:rf_source_valid -> imagecount_s1_agent_rsp_fifo:in_valid
	wire  [106:0] imagecount_s1_agent_rf_source_data;                                                // imagecount_s1_agent:rf_source_data -> imagecount_s1_agent_rsp_fifo:in_data
	wire          imagecount_s1_agent_rf_source_ready;                                               // imagecount_s1_agent_rsp_fifo:in_ready -> imagecount_s1_agent:rf_source_ready
	wire          imagecount_s1_agent_rf_source_startofpacket;                                       // imagecount_s1_agent:rf_source_startofpacket -> imagecount_s1_agent_rsp_fifo:in_startofpacket
	wire          imagecount_s1_agent_rf_source_endofpacket;                                         // imagecount_s1_agent:rf_source_endofpacket -> imagecount_s1_agent_rsp_fifo:in_endofpacket
	wire          imagecount_s1_agent_rsp_fifo_out_valid;                                            // imagecount_s1_agent_rsp_fifo:out_valid -> imagecount_s1_agent:rf_sink_valid
	wire  [106:0] imagecount_s1_agent_rsp_fifo_out_data;                                             // imagecount_s1_agent_rsp_fifo:out_data -> imagecount_s1_agent:rf_sink_data
	wire          imagecount_s1_agent_rsp_fifo_out_ready;                                            // imagecount_s1_agent:rf_sink_ready -> imagecount_s1_agent_rsp_fifo:out_ready
	wire          imagecount_s1_agent_rsp_fifo_out_startofpacket;                                    // imagecount_s1_agent_rsp_fifo:out_startofpacket -> imagecount_s1_agent:rf_sink_startofpacket
	wire          imagecount_s1_agent_rsp_fifo_out_endofpacket;                                      // imagecount_s1_agent_rsp_fifo:out_endofpacket -> imagecount_s1_agent:rf_sink_endofpacket
	wire          imagecount_s1_agent_rdata_fifo_src_valid;                                          // imagecount_s1_agent:rdata_fifo_src_valid -> imagecount_s1_agent_rdata_fifo:in_valid
	wire   [33:0] imagecount_s1_agent_rdata_fifo_src_data;                                           // imagecount_s1_agent:rdata_fifo_src_data -> imagecount_s1_agent_rdata_fifo:in_data
	wire          imagecount_s1_agent_rdata_fifo_src_ready;                                          // imagecount_s1_agent_rdata_fifo:in_ready -> imagecount_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                             // cmd_mux_003:src_valid -> imagecount_s1_agent:cp_valid
	wire  [105:0] cmd_mux_003_src_data;                                                              // cmd_mux_003:src_data -> imagecount_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                             // imagecount_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                           // cmd_mux_003:src_channel -> imagecount_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                     // cmd_mux_003:src_startofpacket -> imagecount_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                       // cmd_mux_003:src_endofpacket -> imagecount_s1_agent:cp_endofpacket
	wire          bridge_0_avalon_master_agent_cp_valid;                                             // bridge_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [213:0] bridge_0_avalon_master_agent_cp_data;                                              // bridge_0_avalon_master_agent:cp_data -> router:sink_data
	wire          bridge_0_avalon_master_agent_cp_ready;                                             // router:sink_ready -> bridge_0_avalon_master_agent:cp_ready
	wire          bridge_0_avalon_master_agent_cp_startofpacket;                                     // bridge_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          bridge_0_avalon_master_agent_cp_endofpacket;                                       // bridge_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [213:0] router_src_data;                                                                   // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                  // cmd_demux:sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          jtag_master_master_agent_cp_valid;                                                 // jtag_master_master_agent:cp_valid -> router_001:sink_valid
	wire  [105:0] jtag_master_master_agent_cp_data;                                                  // jtag_master_master_agent:cp_data -> router_001:sink_data
	wire          jtag_master_master_agent_cp_ready;                                                 // router_001:sink_ready -> jtag_master_master_agent:cp_ready
	wire          jtag_master_master_agent_cp_startofpacket;                                         // jtag_master_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          jtag_master_master_agent_cp_endofpacket;                                           // jtag_master_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sdram_controller_s1_agent_rp_valid;                                                // sdram_controller_s1_agent:rp_valid -> router_002:sink_valid
	wire   [87:0] sdram_controller_s1_agent_rp_data;                                                 // sdram_controller_s1_agent:rp_data -> router_002:sink_data
	wire          sdram_controller_s1_agent_rp_ready;                                                // router_002:sink_ready -> sdram_controller_s1_agent:rp_ready
	wire          sdram_controller_s1_agent_rp_startofpacket;                                        // sdram_controller_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          sdram_controller_s1_agent_rp_endofpacket;                                          // sdram_controller_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                              // router_002:src_valid -> rsp_demux:sink_valid
	wire   [87:0] router_002_src_data;                                                               // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                              // rsp_demux:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                            // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                      // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                        // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          altpll_0_pll_slave_agent_rp_valid;                                                 // altpll_0_pll_slave_agent:rp_valid -> router_003:sink_valid
	wire  [105:0] altpll_0_pll_slave_agent_rp_data;                                                  // altpll_0_pll_slave_agent:rp_data -> router_003:sink_data
	wire          altpll_0_pll_slave_agent_rp_ready;                                                 // router_003:sink_ready -> altpll_0_pll_slave_agent:rp_ready
	wire          altpll_0_pll_slave_agent_rp_startofpacket;                                         // altpll_0_pll_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          altpll_0_pll_slave_agent_rp_endofpacket;                                           // altpll_0_pll_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                              // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_003_src_data;                                                               // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                              // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                            // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                      // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                        // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          framecount_s1_agent_rp_valid;                                                      // framecount_s1_agent:rp_valid -> router_004:sink_valid
	wire  [105:0] framecount_s1_agent_rp_data;                                                       // framecount_s1_agent:rp_data -> router_004:sink_data
	wire          framecount_s1_agent_rp_ready;                                                      // router_004:sink_ready -> framecount_s1_agent:rp_ready
	wire          framecount_s1_agent_rp_startofpacket;                                              // framecount_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          framecount_s1_agent_rp_endofpacket;                                                // framecount_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                              // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_004_src_data;                                                               // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                              // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                            // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                      // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                        // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          imagecount_s1_agent_rp_valid;                                                      // imagecount_s1_agent:rp_valid -> router_005:sink_valid
	wire  [105:0] imagecount_s1_agent_rp_data;                                                       // imagecount_s1_agent:rp_data -> router_005:sink_data
	wire          imagecount_s1_agent_rp_ready;                                                      // router_005:sink_ready -> imagecount_s1_agent:rp_ready
	wire          imagecount_s1_agent_rp_startofpacket;                                              // imagecount_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          imagecount_s1_agent_rp_endofpacket;                                                // imagecount_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                              // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [105:0] router_005_src_data;                                                               // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                              // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                                            // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                      // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                        // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_001_src_valid;                                                              // router_001:src_valid -> jtag_master_master_limiter:cmd_sink_valid
	wire  [105:0] router_001_src_data;                                                               // router_001:src_data -> jtag_master_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                              // jtag_master_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                            // router_001:src_channel -> jtag_master_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> jtag_master_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> jtag_master_master_limiter:cmd_sink_endofpacket
	wire  [105:0] jtag_master_master_limiter_cmd_src_data;                                           // jtag_master_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          jtag_master_master_limiter_cmd_src_ready;                                          // cmd_demux_001:sink_ready -> jtag_master_master_limiter:cmd_src_ready
	wire    [3:0] jtag_master_master_limiter_cmd_src_channel;                                        // jtag_master_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          jtag_master_master_limiter_cmd_src_startofpacket;                                  // jtag_master_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          jtag_master_master_limiter_cmd_src_endofpacket;                                    // jtag_master_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                             // rsp_mux_001:src_valid -> jtag_master_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_001_src_data;                                                              // rsp_mux_001:src_data -> jtag_master_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                             // jtag_master_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                                           // rsp_mux_001:src_channel -> jtag_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                     // rsp_mux_001:src_startofpacket -> jtag_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                       // rsp_mux_001:src_endofpacket -> jtag_master_master_limiter:rsp_sink_endofpacket
	wire          jtag_master_master_limiter_rsp_src_valid;                                          // jtag_master_master_limiter:rsp_src_valid -> jtag_master_master_agent:rp_valid
	wire  [105:0] jtag_master_master_limiter_rsp_src_data;                                           // jtag_master_master_limiter:rsp_src_data -> jtag_master_master_agent:rp_data
	wire          jtag_master_master_limiter_rsp_src_ready;                                          // jtag_master_master_agent:rp_ready -> jtag_master_master_limiter:rsp_src_ready
	wire    [3:0] jtag_master_master_limiter_rsp_src_channel;                                        // jtag_master_master_limiter:rsp_src_channel -> jtag_master_master_agent:rp_channel
	wire          jtag_master_master_limiter_rsp_src_startofpacket;                                  // jtag_master_master_limiter:rsp_src_startofpacket -> jtag_master_master_agent:rp_startofpacket
	wire          jtag_master_master_limiter_rsp_src_endofpacket;                                    // jtag_master_master_limiter:rsp_src_endofpacket -> jtag_master_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> sdram_controller_s1_burst_adapter:sink0_valid
	wire   [87:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> sdram_controller_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                 // sdram_controller_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> sdram_controller_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> sdram_controller_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> sdram_controller_s1_burst_adapter:sink0_endofpacket
	wire          sdram_controller_s1_burst_adapter_source0_valid;                                   // sdram_controller_s1_burst_adapter:source0_valid -> sdram_controller_s1_agent:cp_valid
	wire   [87:0] sdram_controller_s1_burst_adapter_source0_data;                                    // sdram_controller_s1_burst_adapter:source0_data -> sdram_controller_s1_agent:cp_data
	wire          sdram_controller_s1_burst_adapter_source0_ready;                                   // sdram_controller_s1_agent:cp_ready -> sdram_controller_s1_burst_adapter:source0_ready
	wire    [3:0] sdram_controller_s1_burst_adapter_source0_channel;                                 // sdram_controller_s1_burst_adapter:source0_channel -> sdram_controller_s1_agent:cp_channel
	wire          sdram_controller_s1_burst_adapter_source0_startofpacket;                           // sdram_controller_s1_burst_adapter:source0_startofpacket -> sdram_controller_s1_agent:cp_startofpacket
	wire          sdram_controller_s1_burst_adapter_source0_endofpacket;                             // sdram_controller_s1_burst_adapter:source0_endofpacket -> sdram_controller_s1_agent:cp_endofpacket
	wire          cmd_demux_001_src1_valid;                                                          // cmd_demux_001:src1_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] cmd_demux_001_src1_data;                                                           // cmd_demux_001:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src1_ready;                                                          // cmd_mux_001:sink0_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                                        // cmd_demux_001:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                                  // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                    // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                          // rsp_demux_001:src0_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] rsp_demux_001_src0_data;                                                           // rsp_demux_001:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src0_ready;                                                          // rsp_mux_001:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                        // rsp_demux_001:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                  // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                    // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:in_valid
	wire  [213:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                              // bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:in_endofpacket
	wire          bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_valid;         // bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire   [87:0] bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_data;          // bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_ready;         // cmd_mux:sink0_ready -> bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:out_ready
	wire    [3:0] bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_channel;       // bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_startofpacket; // bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_endofpacket;   // bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                          // cmd_demux_001:src0_valid -> jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:in_valid
	wire  [105:0] cmd_demux_001_src0_data;                                                           // cmd_demux_001:src0_data -> jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                          // jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                                        // cmd_demux_001:src0_channel -> jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                  // cmd_demux_001:src0_startofpacket -> jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                    // cmd_demux_001:src0_endofpacket -> jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:in_endofpacket
	wire          rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:in_valid
	wire   [87:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                              // sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:in_endofpacket
	wire          sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_valid;         // sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [213:0] sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_data;          // sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_ready;         // rsp_mux:sink0_ready -> sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:out_ready
	wire    [3:0] sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_channel;       // sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_startofpacket; // sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_endofpacket;   // sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                              // rsp_demux:src1_valid -> sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:in_valid
	wire   [87:0] rsp_demux_src1_data;                                                               // rsp_demux:src1_data -> sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                              // sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                                            // rsp_demux:src1_channel -> sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                      // rsp_demux:src1_startofpacket -> sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                        // rsp_demux:src1_endofpacket -> sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:in_endofpacket
	wire          cmd_demux_001_src2_valid;                                                          // cmd_demux_001:src2_valid -> crosser:in_valid
	wire  [105:0] cmd_demux_001_src2_data;                                                           // cmd_demux_001:src2_data -> crosser:in_data
	wire          cmd_demux_001_src2_ready;                                                          // crosser:in_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                                        // cmd_demux_001:src2_channel -> crosser:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                  // cmd_demux_001:src2_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                    // cmd_demux_001:src2_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                 // crosser:out_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] crosser_out_data;                                                                  // crosser:out_data -> cmd_mux_002:sink0_data
	wire          crosser_out_ready;                                                                 // cmd_mux_002:sink0_ready -> crosser:out_ready
	wire    [3:0] crosser_out_channel;                                                               // crosser:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_out_startofpacket;                                                         // crosser:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                           // crosser:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                          // cmd_demux_001:src3_valid -> crosser_001:in_valid
	wire  [105:0] cmd_demux_001_src3_data;                                                           // cmd_demux_001:src3_data -> crosser_001:in_data
	wire          cmd_demux_001_src3_ready;                                                          // crosser_001:in_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                                        // cmd_demux_001:src3_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                  // cmd_demux_001:src3_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                    // cmd_demux_001:src3_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                             // crosser_001:out_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] crosser_001_out_data;                                                              // crosser_001:out_data -> cmd_mux_003:sink0_data
	wire          crosser_001_out_ready;                                                             // cmd_mux_003:sink0_ready -> crosser_001:out_ready
	wire    [3:0] crosser_001_out_channel;                                                           // crosser_001:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_001_out_startofpacket;                                                     // crosser_001:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                       // crosser_001:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                          // rsp_demux_002:src0_valid -> crosser_002:in_valid
	wire  [105:0] rsp_demux_002_src0_data;                                                           // rsp_demux_002:src0_data -> crosser_002:in_data
	wire          rsp_demux_002_src0_ready;                                                          // crosser_002:in_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                        // rsp_demux_002:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                  // rsp_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                    // rsp_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                             // crosser_002:out_valid -> rsp_mux_001:sink2_valid
	wire  [105:0] crosser_002_out_data;                                                              // crosser_002:out_data -> rsp_mux_001:sink2_data
	wire          crosser_002_out_ready;                                                             // rsp_mux_001:sink2_ready -> crosser_002:out_ready
	wire    [3:0] crosser_002_out_channel;                                                           // crosser_002:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_002_out_startofpacket;                                                     // crosser_002:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                                       // crosser_002:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                          // rsp_demux_003:src0_valid -> crosser_003:in_valid
	wire  [105:0] rsp_demux_003_src0_data;                                                           // rsp_demux_003:src0_data -> crosser_003:in_data
	wire          rsp_demux_003_src0_ready;                                                          // crosser_003:in_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                        // rsp_demux_003:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                  // rsp_demux_003:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                    // rsp_demux_003:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                             // crosser_003:out_valid -> rsp_mux_001:sink3_valid
	wire  [105:0] crosser_003_out_data;                                                              // crosser_003:out_data -> rsp_mux_001:sink3_data
	wire          crosser_003_out_ready;                                                             // rsp_mux_001:sink3_ready -> crosser_003:out_ready
	wire    [3:0] crosser_003_out_channel;                                                           // crosser_003:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_003_out_startofpacket;                                                     // crosser_003:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_003_out_endofpacket;                                                       // crosser_003:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_valid;             // jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:out_valid -> crosser_004:in_valid
	wire   [87:0] jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_data;              // jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:out_data -> crosser_004:in_data
	wire          jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_ready;             // crosser_004:in_ready -> jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:out_ready
	wire    [3:0] jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_channel;           // jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:out_channel -> crosser_004:in_channel
	wire          jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_startofpacket;     // jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:out_startofpacket -> crosser_004:in_startofpacket
	wire          jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_endofpacket;       // jtag_master_master_to_sdram_controller_s1_cmd_width_adapter:out_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                             // crosser_004:out_valid -> cmd_mux:sink1_valid
	wire   [87:0] crosser_004_out_data;                                                              // crosser_004:out_data -> cmd_mux:sink1_data
	wire          crosser_004_out_ready;                                                             // cmd_mux:sink1_ready -> crosser_004:out_ready
	wire    [3:0] crosser_004_out_channel;                                                           // crosser_004:out_channel -> cmd_mux:sink1_channel
	wire          crosser_004_out_startofpacket;                                                     // crosser_004:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                                       // crosser_004:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_valid;             // sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:out_valid -> crosser_005:in_valid
	wire  [105:0] sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_data;              // sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:out_data -> crosser_005:in_data
	wire          sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_ready;             // crosser_005:in_ready -> sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:out_ready
	wire    [3:0] sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_channel;           // sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:out_channel -> crosser_005:in_channel
	wire          sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_startofpacket;     // sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:out_startofpacket -> crosser_005:in_startofpacket
	wire          sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_endofpacket;       // sdram_controller_s1_to_jtag_master_master_rsp_width_adapter:out_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                             // crosser_005:out_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] crosser_005_out_data;                                                              // crosser_005:out_data -> rsp_mux_001:sink0_data
	wire          crosser_005_out_ready;                                                             // rsp_mux_001:sink0_ready -> crosser_005:out_ready
	wire    [3:0] crosser_005_out_channel;                                                           // crosser_005:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_005_out_startofpacket;                                                     // crosser_005:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                       // crosser_005:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire    [3:0] jtag_master_master_limiter_cmd_valid_data;                                         // jtag_master_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sdram_controller_s1_agent_rdata_fifo_out_valid;                                    // sdram_controller_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_controller_s1_agent_rdata_fifo_out_data;                                     // sdram_controller_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_controller_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter:in_0_ready -> sdram_controller_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                     // avalon_st_adapter:out_0_valid -> sdram_controller_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                      // avalon_st_adapter:out_0_data -> sdram_controller_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                     // sdram_controller_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                     // avalon_st_adapter:out_0_error -> sdram_controller_s1_agent:rdata_fifo_sink_error
	wire          altpll_0_pll_slave_agent_rdata_fifo_out_valid;                                     // altpll_0_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] altpll_0_pll_slave_agent_rdata_fifo_out_data;                                      // altpll_0_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          altpll_0_pll_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_001:in_0_ready -> altpll_0_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                 // avalon_st_adapter_001:out_0_valid -> altpll_0_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                  // avalon_st_adapter_001:out_0_data -> altpll_0_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                 // altpll_0_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                 // avalon_st_adapter_001:out_0_error -> altpll_0_pll_slave_agent:rdata_fifo_sink_error
	wire          framecount_s1_agent_rdata_fifo_out_valid;                                          // framecount_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] framecount_s1_agent_rdata_fifo_out_data;                                           // framecount_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          framecount_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_002:in_0_ready -> framecount_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                 // avalon_st_adapter_002:out_0_valid -> framecount_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                  // avalon_st_adapter_002:out_0_data -> framecount_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                 // framecount_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                 // avalon_st_adapter_002:out_0_error -> framecount_s1_agent:rdata_fifo_sink_error
	wire          imagecount_s1_agent_rdata_fifo_out_valid;                                          // imagecount_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] imagecount_s1_agent_rdata_fifo_out_data;                                           // imagecount_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          imagecount_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_003:in_0_ready -> imagecount_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                 // avalon_st_adapter_003:out_0_valid -> imagecount_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                  // avalon_st_adapter_003:out_0_data -> imagecount_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                 // imagecount_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                 // avalon_st_adapter_003:out_0_error -> imagecount_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) bridge_0_avalon_master_translator (
		.clk                    (altpll_0_c0_clk),                                                           //                       clk.clk
		.reset                  (bridge_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (bridge_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (bridge_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (bridge_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (bridge_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (bridge_0_avalon_master_read),                                               //                          .read
		.av_readdata            (bridge_0_avalon_master_readdata),                                           //                          .readdata
		.av_write               (bridge_0_avalon_master_write),                                              //                          .write
		.av_writedata           (bridge_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_master_master_translator (
		.clk                    (clk_0_clk_clk),                                                         //                       clk.clk
		.reset                  (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset),            //                     reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (jtag_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (jtag_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (jtag_master_master_byteenable),                                         //                          .byteenable
		.av_read                (jtag_master_master_read),                                               //                          .read
		.av_readdata            (jtag_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (jtag_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (jtag_master_master_write),                                              //                          .write
		.av_writedata           (jtag_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_s1_translator (
		.clk                    (altpll_0_c0_clk),                                    //                      clk.clk
		.reset                  (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_controller_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_s1_write),                          //                         .write
		.av_read                (sdram_controller_s1_read),                           //                         .read
		.av_readdata            (sdram_controller_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_controller_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_controller_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_controller_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_controller_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_controller_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_0_pll_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_0_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_0_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_0_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_0_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_0_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_0_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_0_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_0_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_0_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_0_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_0_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_0_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_0_pll_slave_write),                                   //                         .write
		.av_read                (altpll_0_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_0_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_0_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) framecount_s1_translator (
		.clk                    (altpll_0_c0_clk),                                    //                      clk.clk
		.reset                  (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (framecount_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (framecount_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (framecount_s1_agent_m0_read),                        //                         .read
		.uav_write              (framecount_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (framecount_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (framecount_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (framecount_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (framecount_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (framecount_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (framecount_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (framecount_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (framecount_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (framecount_s1_write),                                //                         .write
		.av_readdata            (framecount_s1_readdata),                             //                         .readdata
		.av_writedata           (framecount_s1_writedata),                            //                         .writedata
		.av_chipselect          (framecount_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) imagecount_s1_translator (
		.clk                    (altpll_0_c0_clk),                                    //                      clk.clk
		.reset                  (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (imagecount_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (imagecount_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (imagecount_s1_agent_m0_read),                        //                         .read
		.uav_write              (imagecount_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (imagecount_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (imagecount_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (imagecount_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (imagecount_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (imagecount_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (imagecount_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (imagecount_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (imagecount_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (imagecount_s1_write),                                //                         .write
		.av_readdata            (imagecount_s1_readdata),                             //                         .readdata
		.av_writedata           (imagecount_s1_writedata),                            //                         .writedata
		.av_chipselect          (imagecount_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (213),
		.PKT_ORI_BURST_SIZE_L      (211),
		.PKT_RESPONSE_STATUS_H     (210),
		.PKT_RESPONSE_STATUS_L     (209),
		.PKT_QOS_H                 (196),
		.PKT_QOS_L                 (196),
		.PKT_DATA_SIDEBAND_H       (194),
		.PKT_DATA_SIDEBAND_L       (194),
		.PKT_ADDR_SIDEBAND_H       (193),
		.PKT_ADDR_SIDEBAND_L       (193),
		.PKT_BURST_TYPE_H          (192),
		.PKT_BURST_TYPE_L          (191),
		.PKT_CACHE_H               (208),
		.PKT_CACHE_L               (205),
		.PKT_THREAD_ID_H           (201),
		.PKT_THREAD_ID_L           (201),
		.PKT_BURST_SIZE_H          (190),
		.PKT_BURST_SIZE_L          (188),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (195),
		.PKT_PROTECTION_H          (204),
		.PKT_PROTECTION_L          (202),
		.PKT_BURSTWRAP_H           (187),
		.PKT_BURSTWRAP_L           (187),
		.PKT_BYTE_CNT_H            (186),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (198),
		.PKT_SRC_ID_L              (197),
		.PKT_DEST_ID_H             (200),
		.PKT_DEST_ID_L             (199),
		.ST_DATA_W                 (214),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) bridge_0_avalon_master_agent (
		.clk                   (altpll_0_c0_clk),                                                           //       clk.clk
		.reset                 (bridge_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (bridge_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (bridge_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (bridge_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (bridge_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (bridge_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (bridge_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                         //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_master_master_agent (
		.clk                   (clk_0_clk_clk),                                                         //       clk.clk
		.reset                 (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.av_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_s1_agent (
		.clk                     (altpll_0_c0_clk),                                         //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_controller_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_controller_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_controller_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_controller_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_controller_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_controller_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_controller_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_controller_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_controller_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_controller_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_controller_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_controller_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_controller_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_controller_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_controller_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_controller_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_controller_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_controller_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_controller_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_controller_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_controller_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_controller_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_controller_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_controller_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_controller_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_controller_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sdram_controller_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_controller_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                      //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rdata_fifo (
		.clk               (altpll_0_c0_clk),                                    //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_controller_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_controller_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_controller_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_controller_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_controller_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_0_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_0_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_0_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_0_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_0_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_0_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_0_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_0_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_0_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_0_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_0_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_0_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_0_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_0_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_0_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_0_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_0_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                    //                .channel
		.rf_sink_ready           (altpll_0_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_0_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_0_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_0_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_0_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_0_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_0_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_0_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (altpll_0_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_0_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_0_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_0_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_0_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_0_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_0_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_0_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_0_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_0_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_0_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_0_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_0_pll_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_0_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_0_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_0_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_0_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_0_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_0_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) framecount_s1_agent (
		.clk                     (altpll_0_c0_clk),                                    //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (framecount_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (framecount_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (framecount_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (framecount_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (framecount_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (framecount_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (framecount_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (framecount_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (framecount_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (framecount_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (framecount_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (framecount_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (framecount_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (framecount_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (framecount_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (framecount_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_002_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                            //                .channel
		.rf_sink_ready           (framecount_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (framecount_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (framecount_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (framecount_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (framecount_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (framecount_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (framecount_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (framecount_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (framecount_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (framecount_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (framecount_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (framecount_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (framecount_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) framecount_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                    //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (framecount_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (framecount_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (framecount_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (framecount_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (framecount_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (framecount_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (framecount_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (framecount_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (framecount_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (framecount_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) framecount_s1_agent_rdata_fifo (
		.clk               (altpll_0_c0_clk),                                    //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (framecount_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (framecount_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (framecount_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (framecount_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (framecount_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (framecount_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) imagecount_s1_agent (
		.clk                     (altpll_0_c0_clk),                                    //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (imagecount_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (imagecount_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (imagecount_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (imagecount_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (imagecount_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (imagecount_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (imagecount_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (imagecount_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (imagecount_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (imagecount_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (imagecount_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (imagecount_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (imagecount_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (imagecount_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (imagecount_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (imagecount_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_003_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                            //                .channel
		.rf_sink_ready           (imagecount_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (imagecount_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (imagecount_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (imagecount_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (imagecount_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (imagecount_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (imagecount_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (imagecount_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (imagecount_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (imagecount_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (imagecount_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (imagecount_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (imagecount_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) imagecount_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                    //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (imagecount_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (imagecount_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (imagecount_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (imagecount_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (imagecount_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (imagecount_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (imagecount_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (imagecount_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (imagecount_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (imagecount_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) imagecount_s1_agent_rdata_fifo (
		.clk               (altpll_0_c0_clk),                                    //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (imagecount_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (imagecount_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (imagecount_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (imagecount_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (imagecount_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (imagecount_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (bridge_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (bridge_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (bridge_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (bridge_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (bridge_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (bridge_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (jtag_master_master_agent_cp_ready),                          //      sink.ready
		.sink_valid         (jtag_master_master_agent_cp_valid),                          //          .valid
		.sink_data          (jtag_master_master_agent_cp_data),                           //          .data
		.sink_startofpacket (jtag_master_master_agent_cp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (jtag_master_master_agent_cp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //       src.ready
		.src_valid          (router_001_src_valid),                                       //          .valid
		.src_data           (router_001_src_data),                                        //          .data
		.src_channel        (router_001_src_channel),                                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sdram_controller_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (altpll_0_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_0_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_0_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_0_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_0_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	system_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (framecount_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (framecount_s1_agent_rp_valid),                       //          .valid
		.sink_data          (framecount_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (framecount_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (framecount_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                               //       src.ready
		.src_valid          (router_004_src_valid),                               //          .valid
		.src_data           (router_004_src_data),                                //          .data
		.src_channel        (router_004_src_channel),                             //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (imagecount_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (imagecount_s1_agent_rp_valid),                       //          .valid
		.sink_data          (imagecount_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (imagecount_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (imagecount_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_master_master_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                       //          .valid
		.cmd_sink_data          (router_001_src_data),                                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (jtag_master_master_limiter_cmd_src_ready),                   //   cmd_src.ready
		.cmd_src_data           (jtag_master_master_limiter_cmd_src_data),                    //          .data
		.cmd_src_channel        (jtag_master_master_limiter_cmd_src_channel),                 //          .channel
		.cmd_src_startofpacket  (jtag_master_master_limiter_cmd_src_startofpacket),           //          .startofpacket
		.cmd_src_endofpacket    (jtag_master_master_limiter_cmd_src_endofpacket),             //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (jtag_master_master_limiter_rsp_src_ready),                   //   rsp_src.ready
		.rsp_src_valid          (jtag_master_master_limiter_rsp_src_valid),                   //          .valid
		.rsp_src_data           (jtag_master_master_limiter_rsp_src_data),                    //          .data
		.rsp_src_channel        (jtag_master_master_limiter_rsp_src_channel),                 //          .channel
		.rsp_src_startofpacket  (jtag_master_master_limiter_rsp_src_startofpacket),           //          .startofpacket
		.rsp_src_endofpacket    (jtag_master_master_limiter_rsp_src_endofpacket),             //          .endofpacket
		.cmd_src_valid          (jtag_master_master_limiter_cmd_valid_data)                   // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_s1_burst_adapter (
		.clk                   (altpll_0_c0_clk),                                         //       cr0.clk
		.reset                 (sdram_controller_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (sdram_controller_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_s1_burst_adapter_source0_ready)          //          .ready
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (altpll_0_c0_clk),                            //       clk.clk
		.reset              (bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                           //      sink.ready
		.sink_channel       (router_src_channel),                         //          .channel
		.sink_data          (router_src_data),                            //          .data
		.sink_startofpacket (router_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_src0_data),                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                              //        clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (jtag_master_master_limiter_cmd_src_ready),                   //       sink.ready
		.sink_channel       (jtag_master_master_limiter_cmd_src_channel),                 //           .channel
		.sink_data          (jtag_master_master_limiter_cmd_src_data),                    //           .data
		.sink_startofpacket (jtag_master_master_limiter_cmd_src_startofpacket),           //           .startofpacket
		.sink_endofpacket   (jtag_master_master_limiter_cmd_src_endofpacket),             //           .endofpacket
		.sink_valid         (jtag_master_master_limiter_cmd_valid_data),                  // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                             //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                   //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                   //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                    //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                 //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                             //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                   //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                   //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                    //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                 //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                              //           .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_0_c0_clk),                                                                   //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                                                             //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                                                             //          .valid
		.sink1_channel       (crosser_004_out_channel),                                                           //          .channel
		.sink1_data          (crosser_004_out_data),                                                              //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),                                                     //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket)                                                        //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                              //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (altpll_0_c0_clk),                                    //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                              //          .valid
		.src_data            (cmd_mux_002_src_data),                               //          .data
		.src_channel         (cmd_mux_002_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                  //          .valid
		.sink0_channel       (crosser_out_channel),                                //          .channel
		.sink0_data          (crosser_out_data),                                   //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (altpll_0_c0_clk),                                    //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                              //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                              //          .valid
		.sink0_channel       (crosser_001_out_channel),                            //          .channel
		.sink0_data          (crosser_001_out_data),                               //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                               //      sink.ready
		.sink_channel       (router_002_src_channel),                             //          .channel
		.sink_data          (router_002_src_data),                                //          .data
		.sink_startofpacket (router_002_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_002_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                         //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                               //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                               //          .valid
		.src1_data          (rsp_demux_src1_data),                                //          .data
		.src1_channel       (rsp_demux_src1_channel),                             //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                       //      sink.ready
		.sink_channel       (router_003_src_channel),                                     //          .channel
		.sink_data          (router_003_src_data),                                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                               //      sink.ready
		.sink_channel       (router_004_src_channel),                             //          .channel
		.sink_data          (router_004_src_data),                                //          .data
		.sink_startofpacket (router_004_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_004_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_002_src0_data),                            //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_002 rsp_demux_003 (
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                               //      sink.ready
		.sink_channel       (router_005_src_channel),                             //          .channel
		.sink_data          (router_005_src_data),                                //          .data
		.sink_startofpacket (router_005_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_005_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_003_src0_data),                            //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (altpll_0_c0_clk),                                                                   //       clk.clk
		.reset               (bridge_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                 //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                 //          .valid
		.src_data            (rsp_mux_src_data),                                                                  //          .data
		.src_channel         (rsp_mux_src_channel),                                                               //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                      //          .valid
		.src_data            (rsp_mux_001_src_data),                                       //          .data
		.src_channel         (rsp_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                      //          .valid
		.sink0_channel       (crosser_005_out_channel),                                    //          .channel
		.sink0_data          (crosser_005_out_data),                                       //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket),                                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                   //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                    //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                             //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                                      //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                                      //          .valid
		.sink2_channel       (crosser_002_out_channel),                                    //          .channel
		.sink2_data          (crosser_002_out_data),                                       //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                              //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket),                                //          .endofpacket
		.sink3_ready         (crosser_003_out_ready),                                      //     sink3.ready
		.sink3_valid         (crosser_003_out_valid),                                      //          .valid
		.sink3_channel       (crosser_003_out_channel),                                    //          .channel
		.sink3_data          (crosser_003_out_data),                                       //          .data
		.sink3_startofpacket (crosser_003_out_startofpacket),                              //          .startofpacket
		.sink3_endofpacket   (crosser_003_out_endofpacket)                                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (186),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (187),
		.IN_PKT_BURSTWRAP_L            (187),
		.IN_PKT_BURST_SIZE_H           (190),
		.IN_PKT_BURST_SIZE_L           (188),
		.IN_PKT_RESPONSE_STATUS_H      (210),
		.IN_PKT_RESPONSE_STATUS_L      (209),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (192),
		.IN_PKT_BURST_TYPE_L           (191),
		.IN_PKT_ORI_BURST_SIZE_L       (211),
		.IN_PKT_ORI_BURST_SIZE_H       (213),
		.IN_ST_DATA_W                  (214),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter (
		.clk                  (altpll_0_c0_clk),                                                                   //       clk.clk
		.reset                (bridge_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                              //          .ready
		.in_data              (cmd_demux_src0_data),                                                               //          .data
		.out_endofpacket      (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (bridge_0_avalon_master_to_sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) jtag_master_master_to_sdram_controller_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                      //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                    //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                      //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                       //          .data
		.out_endofpacket      (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (186),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (190),
		.OUT_PKT_BURST_SIZE_L          (188),
		.OUT_PKT_RESPONSE_STATUS_H     (210),
		.OUT_PKT_RESPONSE_STATUS_L     (209),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (192),
		.OUT_PKT_BURST_TYPE_L          (191),
		.OUT_PKT_ORI_BURST_SIZE_L      (211),
		.OUT_PKT_ORI_BURST_SIZE_H      (213),
		.OUT_ST_DATA_W                 (214),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter (
		.clk                  (altpll_0_c0_clk),                                                                   //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_src0_data),                                                               //          .data
		.out_endofpacket      (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_to_bridge_0_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_to_jtag_master_master_rsp_width_adapter (
		.clk                  (altpll_0_c0_clk),                                                               //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                          //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                        //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                          //          .ready
		.in_data              (rsp_demux_src1_data),                                                           //          .data
		.out_endofpacket      (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                              //        in_clk.clk
		.in_reset          (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                            //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset),         // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                   //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                 //              .channel
		.in_data           (cmd_demux_001_src2_data),                                    //              .data
		.out_ready         (crosser_out_ready),                                          //           out.ready
		.out_valid         (crosser_out_valid),                                          //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                  //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                    //              .endofpacket
		.out_channel       (crosser_out_channel),                                        //              .channel
		.out_data          (crosser_out_data),                                           //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                              //        in_clk.clk
		.in_reset          (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                            //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset),         // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                   //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                 //              .channel
		.in_data           (cmd_demux_001_src3_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                      //           out.ready
		.out_valid         (crosser_001_out_valid),                                      //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                    //              .channel
		.out_data          (crosser_001_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (altpll_0_c0_clk),                                            //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset),         //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                              //       out_clk.clk
		.out_reset         (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_002_src0_data),                                    //              .data
		.out_ready         (crosser_002_out_ready),                                      //           out.ready
		.out_valid         (crosser_002_out_valid),                                      //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                    //              .channel
		.out_data          (crosser_002_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (altpll_0_c0_clk),                                            //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset),         //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                              //       out_clk.clk
		.out_reset         (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_003_src0_data),                                    //              .data
		.out_ready         (crosser_003_out_ready),                                      //           out.ready
		.out_valid         (crosser_003_out_valid),                                      //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                    //              .channel
		.out_data          (crosser_003_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (88),
		.BITS_PER_SYMBOL     (88),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_0_clk_clk),                                                                 //        in_clk.clk
		.in_reset          (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                                               //       out_clk.clk
		.out_reset         (sdram_controller_reset_reset_bridge_in_reset_reset),                            // out_clk_reset.reset
		.in_ready          (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (jtag_master_master_to_sdram_controller_s1_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_004_out_ready),                                                         //           out.ready
		.out_valid         (crosser_004_out_valid),                                                         //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                                 //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                                   //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                                       //              .channel
		.out_data          (crosser_004_out_data),                                                          //              .data
		.in_empty          (1'b0),                                                                          //   (terminated)
		.in_error          (1'b0),                                                                          //   (terminated)
		.out_empty         (),                                                                              //   (terminated)
		.out_error         ()                                                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (altpll_0_c0_clk),                                                               //        in_clk.clk
		.in_reset          (sdram_controller_reset_reset_bridge_in_reset_reset),                            //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                                 //       out_clk.clk
		.out_reset         (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (sdram_controller_s1_to_jtag_master_master_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_005_out_ready),                                                         //           out.ready
		.out_valid         (crosser_005_out_valid),                                                         //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                                 //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                                   //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                                       //              .channel
		.out_data          (crosser_005_out_data),                                                          //              .data
		.in_empty          (1'b0),                                                                          //   (terminated)
		.in_error          (1'b0),                                                                          //   (terminated)
		.out_empty         (),                                                                              //   (terminated)
		.out_error         ()                                                                               //   (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_0_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_controller_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_controller_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                       //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_0_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_0_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_0_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                           //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (framecount_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (framecount_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (framecount_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                   //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (imagecount_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (imagecount_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (imagecount_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

endmodule
